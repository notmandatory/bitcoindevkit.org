(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{455:function(t,e,a){"use strict";a.r(e);var s=a(18),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("A new release of BDK is out: "),a("a",{attrs:{href:"https://crates.io/crates/bdk/0.6.0",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("v0.6.0")]),a("OutboundLink")],1),t._v(" brings some new API calls, renamed types and some bugfixes.")]),t._v(" "),a("p",[t._v("You can find the full "),a("a",{attrs:{href:"https://github.com/bitcoindevkit/bdk/blob/2bddd9baedc3744cd7647176c2f31405ee7bb54a/CHANGELOG.md#v060---v051",target:"_blank",rel:"noopener noreferrer"}},[t._v("v0.6.0 changelog"),a("OutboundLink")],1),t._v(" on GitHub.")]),t._v(" "),a("h2",{attrs:{id:"whats-new-in-v060"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#whats-new-in-v060"}},[t._v("#")]),t._v(" What's new in v0.6.0")]),t._v(" "),a("p",[t._v("Below are some highlights of the new release:")]),t._v(" "),a("h3",{attrs:{id:"a-new-way-to-generate-addresses"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-new-way-to-generate-addresses"}},[t._v("#")]),t._v(" A new way to generate addresses")]),t._v(" "),a("p",[t._v("The old "),a("code",[t._v("get_new_address()")]),t._v(" method has been upgraded into a more generic "),a("code",[t._v("get_address()")]),t._v(", which takes a "),a("a",{attrs:{href:"https://docs.rs/bdk/0.6.0/bdk/wallet/enum.AddressIndex.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("AddressIndex")]),a("OutboundLink")],1),t._v(" argument. "),a("code",[t._v("AddressIndex")]),t._v(" is defined as an enum with the following variants:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("AddressIndex::New")]),t._v(" increments the derivation index stored in the database and returns a new address. It's equivalent to the old "),a("code",[t._v("get_new_address()")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("AddressIndex::LastUnused")]),t._v(" returns the address for the current derivation index if no usage has been detected. "),a("code",[t._v("sync()")]),t._v(" should be called to ensure the internal database is up to date.")]),t._v(" "),a("li",[a("code",[t._v("AddressIndex::Peek(index)")]),t._v(" returns the address at a given derivation index, without updating the database.")]),t._v(" "),a("li",[a("code",[t._v("AddressIndex::Reset(index)")]),t._v(" returns the address at a given derivation index, and stores that value in the database.")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints the first ten addresses without updating the derivation index")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Address #{}: {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" wallet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AddressIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Peek")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"easier-multiparty-transaction-creation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#easier-multiparty-transaction-creation"}},[t._v("#")]),t._v(" Easier multiparty transaction creation")]),t._v(" "),a("p",[t._v("A new method called "),a("a",{attrs:{href:"https://docs.rs/bdk/0.6.0/bdk/wallet/struct.Wallet.html#method.get_psbt_input",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("get_psbt_input()")]),a("OutboundLink")],1),t._v(" has been added to the "),a("code",[t._v("Wallet")]),t._v(" structure, and it makes it very easy to get a complete PSBT input with all the required metadata for a given UTXO. This can be very convenient\nwhen working with "),a("code",[t._v("add_foreign_utxo()")]),t._v(", which was added in the previous release:")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On Alice's wallet")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" alice_utxo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalUtxo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" alice_psbt_input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wallet_alice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_psbt_input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alice_utxo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send_input_to_bob")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alice_utxo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("outpoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" alice_psbt_input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On Bob's wallet")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" builder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wallet_bob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("build_tx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbuilder\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_recipient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("script_pubkey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60_000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_foreign_utxo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alice_outpoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" alice_psbt_input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" satisfaction_weight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("h3",{attrs:{id:"renamed-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#renamed-types"}},[t._v("#")]),t._v(" Renamed types")]),t._v(" "),a("p",[t._v("To keep our coding style in line with the best practices defined by the Rust language, we've renamed some of our types and enum variants to avoid using "),a("a",{attrs:{href:"https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",target:"_blank",rel:"noopener noreferrer"}},[t._v("upper case acronyms"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("Some examples are:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("UTXO")]),t._v(" -> "),a("code",[t._v("Utxo")])]),t._v(" "),a("li",[a("code",[t._v("RBFValue")]),t._v(" -> "),a("code",[t._v("RbfValue")])]),t._v(" "),a("li",[a("code",[t._v("BIP69Lexicographic")]),t._v(" -> "),a("code",[t._v("Bip69Lexicographic")])]),t._v(" "),a("li",[a("code",[t._v("P2PKH")]),t._v(" -> "),a("code",[t._v("P2Pkh")])]),t._v(" "),a("li",[a("code",[t._v("BIP44Public")]),t._v(" -> "),a("code",[t._v("Bip44Public")])])]),t._v(" "),a("h3",{attrs:{id:"new-msrv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-msrv"}},[t._v("#")]),t._v(" New MSRV")]),t._v(" "),a("p",[t._v("Due to some changes in one of our dependency, our MSRV has been bumped up from "),a("code",[t._v("1.45")]),t._v(" to "),a("code",[t._v("1.46")]),t._v(", which was released in August 2020. The last release fully supporting "),a("code",[t._v("1.45")]),t._v(" is "),a("code",[t._v("v0.5.1")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"contributors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contributors"}},[t._v("#")]),t._v(" Contributors")]),t._v(" "),a("p",[t._v("A huge thanks to everybody who contributed to this new release with suggestions, pull requests and bug reports.")]),t._v(" "),a("p",[t._v("Since the "),a("code",[t._v("v0.5.1")]),t._v(" release around a month ago, we've had "),a("code",[t._v("37")]),t._v(" new commits made by "),a("code",[t._v("7")]),t._v(" different contributors for a total of "),a("code",[t._v("1092")]),t._v(" additions and "),a("code",[t._v("548")]),t._v(" deletions. Here's the "),a("a",{attrs:{href:"https://github.com/bitcoindevkit/bdk/compare/v0.5.1...v0.6.0",target:"_blank",rel:"noopener noreferrer"}},[t._v("full diff"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("A special thanks to the new contributor for this release:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/da-kami",target:"_blank",rel:"noopener noreferrer"}},[t._v("@da-kami"),a("OutboundLink")],1),t._v(" - Daniel Karzel")])])])}),[],!1,null,null,null);e.default=n.exports}}]);