<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Bitcoin Dev Kit</title>
    <link>https://bitcoindevkit.org/</link>
    <description>Recent content in Home on Bitcoin Dev Kit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Apr 2020 09:46:18 +0200</lastBuildDate><atom:link href="https://bitcoindevkit.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installation</title>
      <link>https://bitcoindevkit.org/bdk-cli/installation/</link>
      <pubDate>Tue, 28 Apr 2020 17:11:29 +0200</pubDate>
      
      <guid>https://bitcoindevkit.org/bdk-cli/installation/</guid>
      <description>Requirements The only requirement to run the bdk-cli tool is a Linux/macOS system with a fairly recent Rust toolchain installed. Since Linux distros tend to lag behind with updates, the quickest way to install the Rust compiler and Cargo is rustup.rs. You can head there and follow their instructions, after which you can test if everything went fine by running cargo version, which should print something like:
cargo 1.45.0 (744bd1fbb 2020-06-15) If you really don&amp;rsquo;t want to pipe the output of curl into sh, you can also try using a Docker image and working inside of it, but that&amp;rsquo;s meant for more advanced users and won&amp;rsquo;t be covered in this guide.</description>
    </item>
    
    <item>
      <title>Concept</title>
      <link>https://bitcoindevkit.org/bdk-cli/concept/</link>
      <pubDate>Tue, 28 Apr 2020 17:38:20 +0200</pubDate>
      
      <guid>https://bitcoindevkit.org/bdk-cli/concept/</guid>
      <description>Now, in order to better grasp some of the design choices made by BDK, it&amp;rsquo;s important to understand the main concept driving the development of this project, and the goal that it&amp;rsquo;s trying to achieve.
BDK is aiming first of all to be a set of libraries and tools, all meant to be very reusable and adaptable. Developers working on their own wallets or other projects that are trying to integrate Bitcoin can pick the tools they need and piece them together to prototype and quickly ship a working product.</description>
    </item>
    
    <item>
      <title>Interface</title>
      <link>https://bitcoindevkit.org/bdk-cli/interface/</link>
      <pubDate>Tue, 28 Apr 2020 18:20:28 +0200</pubDate>
      
      <guid>https://bitcoindevkit.org/bdk-cli/interface/</guid>
      <description>Remember the bdk-cli --help command you ran before? Let&amp;rsquo;s analyze its output here to figure out the interface:
Flags FLAGS: -h, --help Prints help information -V, --version Prints version information These are the optional flags that can be set with every command. The -h flag prints the help message, the -V flag only prints the version.
Verbosity If you want to increase the verbosity of the output, you should use the RUST_LOG environment variable.</description>
    </item>
    
    <item>
      <title>Regtest</title>
      <link>https://bitcoindevkit.org/bdk-cli/regtest/</link>
      <pubDate>Wed, 29 Apr 2020 00:19:34 +0200</pubDate>
      
      <guid>https://bitcoindevkit.org/bdk-cli/regtest/</guid>
      <description>Running the bdk-cli tool in regtest requires having a local Electrum server set-up. There are two main implementations, electrs in Rust and ElectrumX in Python. Since the Rust toolchain is already required to use BDK, this page will focus mostly on the former.
Electrs can be installed by running:
cargo install --git https://github.com/romanz/electrs --bin electrs Just like before, this command will probably take a while to finish.
Once it&amp;rsquo;s done, assuming you have a regtest bitcoind running in background, you can launch a new terminal and run the following command to actually start electrs:</description>
    </item>
    
    <item>
      <title>Compiler</title>
      <link>https://bitcoindevkit.org/bdk-cli/compiler/</link>
      <pubDate>Wed, 29 Apr 2020 12:06:50 +0200</pubDate>
      
      <guid>https://bitcoindevkit.org/bdk-cli/compiler/</guid>
      <description>Introduction If you want to play around with more complicated spending policies, you&amp;rsquo;ll start to find it harder and harder to manually create the descriptors. This is where the miniscript compiler comes in! The bdk library includes a very simple compiler that can produce a descriptor given a spending policy. The syntax used to encode the spending policy is very well described in this page, specifically in the &amp;ldquo;Policy to Miniscript compiler&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Playground</title>
      <link>https://bitcoindevkit.org/bdk-cli/playground/</link>
      <pubDate>Fri, 08 May 2020 15:42:22 +0200</pubDate>
      
      <guid>https://bitcoindevkit.org/bdk-cli/playground/</guid>
      <description>.error { color: orange; }   Policy Compiler     P2SH P2WSH P2SH-P2WSH    Map every alias to an existing key or generate a new one. You can also specify known keys directly in the visual editor or the policy input field.       Wallet    Descriptor   Change Descriptor (optional)          This page contains webassembly and javascript content, please enable javascript in your browser.</description>
    </item>
    
    <item>
      <title>Descriptor-based paper wallets</title>
      <link>https://bitcoindevkit.org/blog/2021/03/descriptor-based-paper-wallets/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2021/03/descriptor-based-paper-wallets/</guid>
      <description>In this post, we will use the Rusty Paper Wallet tool to create a multi-owned descriptor-based paper wallet. We will use bdk via the bdk-cli tool to test our descriptor and to be able to sweep the funds from our paper wallet to a new address.
About paper wallets Paper wallets have a lot of drawbacks, as explained in the paper wallet Wikipedia article, as always, do your own research before deciding to use it with mainnet bitcoins.</description>
    </item>
    
    <item>
      <title>Release v0.5.0</title>
      <link>https://bitcoindevkit.org/blog/2021/03/release-v0.5.0/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2021/03/release-v0.5.0/</guid>
      <description>A new release of BDK is out: v0.5.0 is our first release licensed under Apache 2.0 and MIT, brings new features, bugfixes and some internal refactoring.
You can find the full v0.5.0 changelog on GitHub.
What&amp;rsquo;s new in v0.5.0 Below are some highlights of the new release:
Dual Licensing From now on BDK will be released under both Apache 2.0 and MIT, at your discretion. This change aligns our project with many other Rust crates and reiterates our commitment to a permissive licensing model.</description>
    </item>
    
    <item>
      <title>Spending Policy Demo</title>
      <link>https://bitcoindevkit.org/blog/2021/02/spending-policy-demo/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2021/02/spending-policy-demo/</guid>
      <description>In this post we will use the bdk-cli tool to demonstrate how to use the bdk library to:
 generate testnet public and private keys create PSBTs that can be spent based on different miniscript spending policies cooperatively sign and finalize the resulting PSBTs broadcast and confirm spending transactions  The scenario we will simulate is a wallet with two spending policies:
A. three out of three signers must sign spending transaction input UTXOs, OR</description>
    </item>
    
    <item>
      <title>Release v0.4.0</title>
      <link>https://bitcoindevkit.org/blog/2021/02/release-v0.4.0/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2021/02/release-v0.4.0/</guid>
      <description>A new release of BDK is out: the v0.4.0 release brings updated dependencies, more sanity checks and an overhauled API to build transactions.
You can find the full v0.4.0 changelog on GitHub.
What&amp;rsquo;s new in v0.4.0 Below are some highlights of the new improved APIs coming with this release:
A new API to build transaction The star of this release is the new API designed and implemented by @llfourn that brings much more flexibility to the way we create transactions: originally the process of making a transaction involved the creation of a TxBuilder which was used to configure how the wallet should build the transaction.</description>
    </item>
    
    <item>
      <title>Fee estimation for light-clients (Part 1)</title>
      <link>https://bitcoindevkit.org/blog/2021/01/fee-estimation-for-light-clients-part-1/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2021/01/fee-estimation-for-light-clients-part-1/</guid>
      <description>This post is part 1 of 3 of a series. (Part 2, Part 3)
 Introduction: what is fee estimation? The problem  The challenges and the solution The question The data logger    Introduction: what is fee estimation? Fee estimation is the process of selecting the fee rate1 for a bitcoin transaction being created, according to two main factors:
 The current congestion of the Bitcoin network. The urgency, or lack thereof, for the transaction confirmation, i.</description>
    </item>
    
    <item>
      <title>Fee estimation for light-clients (Part 2)</title>
      <link>https://bitcoindevkit.org/blog/2021/01/fee-estimation-for-light-clients-part-2/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2021/01/fee-estimation-for-light-clients-part-2/</guid>
      <description>This post is part 2 of 3 of a series. (Part 1, Part 3)
 The dataset  The mempool The outliers Recap    The dataset The dataset is publicly available (~500MB gzip compressed, ~2GB as plain CSV).
The output of the model is the fee rate, expressed in [satoshi/vbytes].
What about the inputs? Generally speaking, we have two main requirements for what can be included as input for our model:</description>
    </item>
    
    <item>
      <title>Fee estimation for light-clients (Part 3)</title>
      <link>https://bitcoindevkit.org/blog/2021/01/fee-estimation-for-light-clients-part-3/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2021/01/fee-estimation-for-light-clients-part-3/</guid>
      <description>This post is part 3 of 3 of a series. (Part 1, Part 2)
 The model  Splitting Preprocessing Build Finally, training   The prediction phase Conclusion and future development Acknowledgements  The model The code building and training the model with tensorflow is available in google colab notebook (jupyter notebook); you can also download the file as plain python and run it locally. At least 1 hour is needed to train the full model, but it heavily depends on the hardware available.</description>
    </item>
    
    <item>
      <title>Release v0.3.0</title>
      <link>https://bitcoindevkit.org/blog/2021/01/release-v0.3.0/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2021/01/release-v0.3.0/</guid>
      <description>A new release of BDK is out: the v0.3.0 is a relatively small update compared to v0.2.0, but it still brings some nice APIs improvements and general bugfixes.
You can find the full v0.3.0 changelog on GitHub.
What&amp;rsquo;s new in v0.3.0 Below are some highlights of the new improved APIs coming with this release:
Less verbosity when using Wallet::new_offline() Now you don&amp;rsquo;t have to explicitly provide the OfflineWallet&amp;lt;_&amp;gt; type anymore, saving you one import and making it much less verbose to use.</description>
    </item>
    
    <item>
      <title>Release v0.2.0</title>
      <link>https://bitcoindevkit.org/blog/2020/12/release-v0.2.0/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2020/12/release-v0.2.0/</guid>
      <description>A new release of BDK is finally out! The v0.2.0 release contains many exciting new features, bug fixes and overall improvements. This release also marks the beginning of our new regular release schedule, which will see us pushing out a new release every four weeks. We think this is a good compromise to ensure that developers using BDK have access to all the new features and fixes as soon as possible, at least while the library is still evolving very fast as it is right now.</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://bitcoindevkit.org/blog/2020/12/hello-world/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2020/12/hello-world/</guid>
      <description>Introduction This article should serve as a &amp;ldquo;getting started&amp;rdquo; guide for developers who are considering integrating BDK in their projects: it tries to introduce the reader to the basic concepts behind the library and some of its modules and components that can be used to build a very simple functioning Bitcoin wallet. All the information written in this article are valid for the current master git branch, and should remain valid for the upcoming v0.</description>
    </item>
    
    <item>
      <title>Descriptors in the wild</title>
      <link>https://bitcoindevkit.org/blog/2020/11/descriptors-in-the-wild/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2020/11/descriptors-in-the-wild/</guid>
      <description>I have tried to setup a 2 of 2 multi signature infrastructure with two different wallets, which know nothing about each other, but are compliant with two very important protocols: Output Descriptors and Partially Signed Bitcoin Transactions described in BIP 174.
Before these two protocols came into existence, making a multi signature setup and spending from it was possible only if the involved parties were using the same wallet (eg. Electrum Desktop Wallet).</description>
    </item>
    
  </channel>
</rss>
