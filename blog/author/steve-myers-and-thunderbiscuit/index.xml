<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Steve Myers and Thunderbiscuit on Bitcoin Dev Kit</title>
    <link>https://bitcoindevkit.org/blog/author/steve-myers-and-thunderbiscuit/</link>
    <description>Recent content in Steve Myers and Thunderbiscuit on Bitcoin Dev Kit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://bitcoindevkit.org/blog/author/steve-myers-and-thunderbiscuit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spending Policy Demo</title>
      <link>https://bitcoindevkit.org/blog/2021/02/spending-policy-demo/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bitcoindevkit.org/blog/2021/02/spending-policy-demo/</guid>
      <description>In this post we will use the bdk-cli tool to demonstrate how to use the bdk library to:
 generate testnet public and private keys create PSBTs that can be spent based on different miniscript spending policies cooperatively sign and finalize the resulting PSBTs broadcast and confirm spending transactions  The scenario we will simulate is a wallet with two spending policies:
A. three out of three signers must sign spending transaction input UTXOs, OR</description>
    </item>
    
  </channel>
</rss>
