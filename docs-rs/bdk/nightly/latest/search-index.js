var searchIndex = JSON.parse('{\
"bdk":{"doc":"A modern, lightweight, descriptor-based wallet library …","i":[[0,"blockchain","bdk","Blockchain backends",null,null],[0,"any","bdk::blockchain","Runtime-checked blockchain types",null,null],[4,"AnyBlockchain","bdk::blockchain::any","Type that can contain any of the [<code>Blockchain</code>] types …",null,null],[13,"Electrum","","Electrum client",0,null],[13,"Esplora","","Esplora client",0,null],[13,"CompactFilters","","Compact filters client",0,null],[4,"AnyBlockchainConfig","","Type that can contain any of the blockchain …",null,null],[13,"Electrum","","Electrum client",1,null],[13,"Esplora","","Esplora client",1,null],[13,"CompactFilters","","Compact filters client",1,null],[0,"electrum","bdk::blockchain","Electrum",null,null],[3,"ElectrumBlockchain","bdk::blockchain::electrum","Wrapper over an Electrum Client that implements the …",null,null],[3,"ElectrumBlockchainConfig","","Configuration for an [<code>ElectrumBlockchain</code>]",null,null],[12,"url","","URL of the Electrum server (such as ElectrumX, Esplora, …",2,null],[12,"socks5","","URL of the socks5 proxy server or a Tor service",2,null],[12,"retry","","Request retry count",2,null],[12,"timeout","","Request timeout (seconds)",2,null],[0,"esplora","bdk::blockchain","Esplora",null,null],[3,"EsploraBlockchain","bdk::blockchain::esplora","Structure that implements the logic to sync with Esplora",null,null],[11,"new","","Create a new instance of the client from a base URL",3,[[["u8",15],["option",4],["str",15]]]],[3,"EsploraBlockchainConfig","","Configuration for an [<code>EsploraBlockchain</code>]",null,null],[12,"base_url","","Base URL of the esplora service",4,null],[12,"concurrency","","Number of parallel requests sent to the esplora service …",4,null],[4,"EsploraError","","Errors that can happen during a sync with […",null,null],[13,"Reqwest","","Error with the HTTP call",5,null],[13,"Parsing","","Invalid number returned",5,null],[13,"BitcoinEncoding","","Invalid Bitcoin data returned",5,null],[13,"Hex","","Invalid Hex data returned",5,null],[13,"TransactionNotFound","","Transaction not found",5,null],[13,"HeaderHeightNotFound","","Header height not found",5,null],[13,"HeaderHashNotFound","","Header hash not found",5,null],[0,"compact_filters","bdk::blockchain","Compact Filters",null,null],[3,"Mempool","bdk::blockchain::compact_filters","Container for unconfirmed, but valid Bitcoin transactions",null,null],[3,"Peer","","A Bitcoin peer",null,null],[3,"CompactFiltersBlockchain","","Structure implementing the required blockchain traits",null,null],[11,"new","","Construct a new instance given a list of peers, a path to …",6,[[["usize",15],["peer",3],["asref",8],["option",4],["vec",3],["path",3]],[["result",4],["compactfilterserror",4]]]],[3,"BitcoinPeerConfig","","Data to connect to a Bitcoin P2P peer",null,null],[12,"address","","Peer address such as 127.0.0.1:18333",7,null],[12,"socks5","","Optional socks5 proxy",7,null],[12,"socks5_credentials","","Optional socks5 proxy credentials",7,null],[3,"CompactFiltersBlockchainConfig","","Configuration for a [<code>CompactFiltersBlockchain</code>]",null,null],[12,"peers","","List of peers to try to connect to for asking headers and …",8,null],[12,"network","","Network used",8,null],[12,"storage_dir","","Storage dir to save partially downloaded headers and full …",8,null],[12,"skip_blocks","","Optionally skip initial <code>skip_blocks</code> blocks (default: 0)",8,null],[4,"CompactFiltersError","","An error that can occur during sync with a […",null,null],[13,"InvalidResponse","","A peer sent an invalid or unexpected response",9,null],[13,"InvalidHeaders","","The headers returned are invalid",9,null],[13,"InvalidFilterHeader","","The compact filter headers returned are invalid",9,null],[13,"InvalidFilter","","The compact filter returned is invalid",9,null],[13,"MissingBlock","","The peer is missing a block in the valid chain",9,null],[13,"DataCorruption","","The data stored in the block filters storage are corrupted",9,null],[13,"NotConnected","","A peer is not connected",9,null],[13,"Timeout","","A peer took too long to reply to one of our messages",9,null],[13,"PeerBloomDisabled","","The peer doesn\'t advertise the <code>BLOOM</code> service flag",9,null],[13,"NoPeers","","No peers have been specified",9,null],[13,"DB","","Internal database error",9,null],[13,"IO","","Internal I/O error",9,null],[13,"BIP158","","Invalid BIP158 filter",9,null],[13,"Time","","Internal system time error",9,null],[13,"Global","","Wrapper for [<code>crate::error::Error</code>]",9,null],[4,"Capability","bdk::blockchain","Capabilities that can be supported by a [<code>Blockchain</code>] …",null,null],[13,"FullHistory","","Can recover the full history of a wallet and not only the …",10,null],[13,"GetAnyTx","","Can fetch any historical transaction given its txid",10,null],[13,"AccurateFees","","Can compute accurate fees for the transactions found …",10,null],[8,"Blockchain","","Trait that defines the actions that must be supported by …",null,null],[10,"get_capabilities","","Return the set of [<code>Capability</code>] supported by this backend",11,[[],[["hashset",3],["capability",4]]]],[10,"setup","","Setup the backend and populate the internal database for …",11,[[["usize",15],["option",4],["progress",8]],[["result",4],["error",4]]]],[11,"sync","","Populate the internal database with transactions and UTXOs",11,[[["usize",15],["option",4],["progress",8]],[["result",4],["error",4]]]],[10,"get_tx","","Fetch a transaction from the blockchain given its txid",11,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[10,"broadcast","","Broadcast a transaction",11,[[["transaction",3]],[["result",4],["error",4]]]],[10,"get_height","","Return the current height",11,[[],[["u32",15],["result",4],["error",4]]]],[10,"estimate_fee","","Estimate the fee rate required to confirm a transaction …",11,[[["usize",15]],[["feerate",3],["error",4],["result",4]]]],[8,"ConfigurableBlockchain","","Trait for [<code>Blockchain</code>] types that can be created given a …",null,null],[16,"Config","","Type that contains the configuration",12,null],[10,"from_config","","Create a new instance given a configuration",12,[[],[["error",4],["result",4]]]],[6,"ProgressData","","Data sent with a progress update over a [<code>channel</code>]",null,null],[8,"Progress","","Trait for types that can receive and process progress …",null,null],[10,"update","","Send a new progress update",13,[[["option",4],["f32",15],["string",3]],[["result",4],["error",4]]]],[5,"progress","","Shortcut to create a [<code>channel</code>] (pair of [<code>Sender</code>] and […",null,[[]]],[3,"NoopProgress","","Type that implements [<code>Progress</code>] and drops every update …",null,null],[5,"noop_progress","","Create a new instance of [<code>NoopProgress</code>]",null,[[],["noopprogress",3]]],[3,"LogProgress","","Type that implements [<code>Progress</code>] and logs at level <code>INFO</code> …",null,null],[5,"log_progress","","Create a nwe instance of [<code>LogProgress</code>]",null,[[],["logprogress",3]]],[0,"database","bdk","Database types",null,null],[0,"any","bdk::database","Runtime-checked database types",null,null],[4,"AnyDatabase","bdk::database::any","Type that can contain any of the [<code>Database</code>] types defined …",null,null],[13,"Memory","","In-memory ephemeral database",14,null],[13,"Sled","","Simple key-value embedded database based on [<code>sled</code>]",14,null],[4,"AnyBatch","","Type that contains any of the [<code>BatchDatabase::Batch</code>] …",null,null],[13,"Memory","","In-memory ephemeral database",15,null],[13,"Sled","","Simple key-value embedded database based on [<code>sled</code>]",15,null],[3,"SledDbConfiguration","","Configuration type for a [<code>sled::Tree</code>] database",null,null],[12,"path","","Main directory of the db",16,null],[12,"tree_name","","Name of the database tree, a separated namespace for the …",16,null],[4,"AnyDatabaseConfig","","Type that can contain any of the database configurations …",null,null],[13,"Memory","","Memory database has no config",17,null],[13,"Sled","","Simple key-value embedded database based on [<code>sled</code>]",17,null],[0,"memory","bdk::database","In-memory ephemeral database",null,null],[3,"MemoryDatabase","bdk::database::memory","In-memory ephemeral database",null,null],[11,"new","","Create a new empty database",18,[[]]],[8,"BatchOperations","bdk::database","Trait for operations that can be batched",null,null],[10,"set_script_pubkey","","Store a script_pubkey along with its keychain and child …",19,[[["keychainkind",4],["u32",15],["script",3]],[["result",4],["error",4]]]],[10,"set_utxo","","Store a [<code>UTXO</code>]",19,[[["utxo",3]],[["result",4],["error",4]]]],[10,"set_raw_tx","","Store a raw transaction",19,[[["transaction",3]],[["result",4],["error",4]]]],[10,"set_tx","","Store the metadata of a transaction",19,[[["transactiondetails",3]],[["result",4],["error",4]]]],[10,"set_last_index","","Store the last derivation index for a given keychain.",19,[[["u32",15],["keychainkind",4]],[["result",4],["error",4]]]],[10,"del_script_pubkey_from_path","","Delete a script_pubkey given the keychain and its child …",19,[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]]],[10,"del_path_from_script_pubkey","","Delete the data related to a specific script_pubkey, …",19,[[["script",3]],[["option",4],["error",4],["result",4]]]],[10,"del_utxo","","Delete a [<code>UTXO</code>] given its [<code>OutPoint</code>]",19,[[["outpoint",3]],[["option",4],["result",4],["error",4]]]],[10,"del_raw_tx","","Delete a raw transaction given its [<code>Txid</code>]",19,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[10,"del_tx","","Delete the metadata of a transaction and optionally the …",19,[[["bool",15],["txid",3]],[["result",4],["error",4],["option",4]]]],[10,"del_last_index","","Delete the last derivation index for a keychain.",19,[[["keychainkind",4]],[["error",4],["option",4],["result",4]]]],[8,"Database","","Trait for reading data from a database",null,null],[10,"check_descriptor_checksum","","Read and checks the descriptor checksum for a given …",20,[[["asref",8],["keychainkind",4]],[["result",4],["error",4]]]],[10,"iter_script_pubkeys","","Return the list of script_pubkeys",20,[[["option",4],["keychainkind",4]],[["result",4],["error",4],["vec",3]]]],[10,"iter_utxos","","Return the list of [<code>UTXO</code>]s",20,[[],[["vec",3],["result",4],["error",4]]]],[10,"iter_raw_txs","","Return the list of raw transactions",20,[[],[["result",4],["vec",3],["error",4]]]],[10,"iter_txs","","Return the list of transactions metadata",20,[[["bool",15]],[["result",4],["vec",3],["error",4]]]],[10,"get_script_pubkey_from_path","","Fetch a script_pubkey given the child number of a …",20,[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]]],[10,"get_path_from_script_pubkey","","Fetch the keychain and child number of a given …",20,[[["script",3]],[["option",4],["error",4],["result",4]]]],[10,"get_utxo","","Fetch a [<code>UTXO</code>] given its [<code>OutPoint</code>]",20,[[["outpoint",3]],[["option",4],["result",4],["error",4]]]],[10,"get_raw_tx","","Fetch a raw transaction given its [<code>Txid</code>]",20,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[10,"get_tx","","Fetch the transaction metadata and optionally also the …",20,[[["bool",15],["txid",3]],[["result",4],["error",4],["option",4]]]],[10,"get_last_index","","Return the last defivation index for a keychain.",20,[[["keychainkind",4]],[["error",4],["option",4],["result",4]]]],[10,"increment_last_index","","Increment the last derivation index for a keychain and …",20,[[["keychainkind",4]],[["u32",15],["result",4],["error",4]]]],[8,"BatchDatabase","","Trait for a database that supports batch operations",null,null],[16,"Batch","","Container for the operations",21,null],[10,"begin_batch","","Create a new batch container",21,[[]]],[10,"commit_batch","","Consume and apply a batch of operations",21,[[],[["result",4],["error",4]]]],[8,"ConfigurableDatabase","","Trait for [<code>Database</code>] types that can be created given a …",null,null],[16,"Config","","Type that contains the configuration",22,null],[10,"from_config","","Create a new instance given a configuration",22,[[],[["error",4],["result",4]]]],[0,"descriptor","bdk","Descriptors",null,null],[0,"checksum","bdk::descriptor","Descriptor checksum",null,null],[5,"get_checksum","bdk::descriptor::checksum","Compute the checksum of a descriptor",null,[[["str",15]],[["result",4],["descriptorerror",4],["string",3]]]],[0,"error","bdk::descriptor","Descriptor errors",null,null],[4,"Error","bdk::descriptor::error","Errors related to the parsing and usage of descriptors",null,null],[13,"InvalidHDKeyPath","","Invalid HD Key path, such as having a wildcard but a …",23,null],[13,"InvalidDescriptorChecksum","","The provided descriptor doesn\'t match its checksum",23,null],[13,"HardenedDerivationXpub","","The descriptor contains hardened derivation steps on …",23,null],[13,"Key","","Error thrown while working with <code>keys</code>",23,null],[13,"Policy","","Error while extracting and manipulating policies",23,null],[13,"InvalidDescriptorCharacter","","Invalid character found in the descriptor checksum",23,null],[13,"BIP32","","BIP32 error",23,null],[13,"Base58","","Error during base58 decoding",23,null],[13,"PK","","Key-related error",23,null],[13,"Miniscript","","Miniscript error",23,null],[13,"Hex","","Hex decoding error",23,null],[0,"policy","bdk::descriptor","Descriptor policy",null,null],[3,"PKOrF","bdk::descriptor::policy","Raw public key or extended key fingerprint",null,null],[4,"SatisfiableItem","","An item that needs to be satisfied",null,null],[13,"Signature","","Signature for a raw public key",24,null],[13,"SignatureKey","","Signature for an extended key fingerprint",24,null],[13,"SHA256Preimage","","SHA256 preimage hash",24,null],[12,"hash","bdk::descriptor::policy::SatisfiableItem","The digest value",25,null],[13,"HASH256Preimage","bdk::descriptor::policy","Double SHA256 preimage hash",24,null],[12,"hash","bdk::descriptor::policy::SatisfiableItem","The digest value",26,null],[13,"RIPEMD160Preimage","bdk::descriptor::policy","RIPEMD160 preimage hash",24,null],[12,"hash","bdk::descriptor::policy::SatisfiableItem","The digest value",27,null],[13,"HASH160Preimage","bdk::descriptor::policy","SHA256 then RIPEMD160 preimage hash",24,null],[12,"hash","bdk::descriptor::policy::SatisfiableItem","The digest value",28,null],[13,"AbsoluteTimelock","bdk::descriptor::policy","Absolute timeclock timestamp",24,null],[12,"value","bdk::descriptor::policy::SatisfiableItem","The timestamp value",29,null],[13,"RelativeTimelock","bdk::descriptor::policy","Relative timelock locktime",24,null],[12,"value","bdk::descriptor::policy::SatisfiableItem","The locktime value",30,null],[13,"Multisig","bdk::descriptor::policy","Multi-signature public keys with threshold count",24,null],[12,"keys","bdk::descriptor::policy::SatisfiableItem","The raw public key or extended key fingerprint",31,null],[12,"threshold","","The required threshold count",31,null],[13,"Thresh","bdk::descriptor::policy","Threshold items with threshold count",24,null],[12,"items","bdk::descriptor::policy::SatisfiableItem","The policy items",32,null],[12,"threshold","","The required threshold count",32,null],[11,"is_leaf","bdk::descriptor::policy","Returns whether the [<code>SatisfiableItem</code>] is a leaf item",24,[[],["bool",15]]],[11,"id","","Returns a unique id for the [<code>SatisfiableItem</code>]",24,[[],["string",3]]],[6,"ConditionMap","","Type for a map of sets of [<code>Condition</code>] items keyed by each …",null,null],[6,"FoldedConditionMap","","Type for a map of folded sets of [<code>Condition</code>] items keyed …",null,null],[4,"Satisfaction","","Represent if and how much a policy item is satisfied by …",null,null],[13,"Partial","","Only a partial satisfaction of some kind of threshold …",33,null],[12,"n","bdk::descriptor::policy::Satisfaction","Total number of items",34,null],[12,"m","","Threshold",34,null],[12,"items","","The items that can be satisfied by the descriptor",34,null],[12,"sorted","","Whether the items are sorted in lexicographic order (used …",34,null],[12,"conditions","","Extra conditions that also need to be satisfied",34,null],[13,"PartialComplete","bdk::descriptor::policy","Can reach the threshold of some kind of threshold policy",33,null],[12,"n","bdk::descriptor::policy::Satisfaction","Total number of items",35,null],[12,"m","","Threshold",35,null],[12,"items","","The items that can be satisfied by the descriptor",35,null],[12,"sorted","","Whether the items are sorted in lexicographic order (used …",35,null],[12,"conditions","","Extra conditions that also need to be satisfied",35,null],[13,"Complete","bdk::descriptor::policy","Can satisfy the policy item",33,null],[12,"condition","bdk::descriptor::policy::Satisfaction","Extra conditions that also need to be satisfied",36,null],[13,"None","bdk::descriptor::policy","Cannot satisfy or contribute to the policy item",33,null],[11,"is_leaf","","Returns whether the [<code>Satisfaction</code>] is a leaf item",33,[[],["bool",15]]],[3,"Policy","","Descriptor spending policy",null,null],[12,"id","","Identifier for this policy node",37,null],[12,"item","","Type of this policy node",37,null],[12,"satisfaction","","How a much given PSBT already satisfies this polcy node <strong>…",37,null],[12,"contribution","","How the wallet\'s descriptor can satisfy this policy node",37,null],[3,"Condition","","An extra condition that must be satisfied but that is out …",null,null],[12,"csv","","Optional CheckSequenceVerify condition",38,null],[12,"timelock","","Optional timelock condition",38,null],[11,"is_null","","Returns <code>true</code> if there are no extra conditions to verify",38,[[],["bool",15]]],[4,"PolicyError","","Errors that can happen while extracting and manipulating …",null,null],[13,"NotEnoughItemsSelected","","Not enough items are selected to satisfy a […",39,null],[13,"IndexOutOfRange","","Index out of range for an item to satisfy a […",39,null],[13,"AddOnLeaf","","Can not add to an item that is [<code>Satisfaction::None</code>] or […",39,null],[13,"AddOnPartialComplete","","Can not add to an item that is […",39,null],[13,"MixedTimelockUnits","","Can not merge CSV or timelock values unless both are less …",39,null],[13,"IncompatibleConditions","","Incompatible conditions (not currently used)",39,null],[11,"requires_path","","Return whether or not a specific path in the policy tree …",37,[[],["bool",15]]],[11,"get_condition","","Return the conditions that are set by the spending policy …",37,[[["btreemap",3]],[["policyerror",4],["result",4],["condition",3]]]],[0,"template","bdk::descriptor","Descriptor templates",null,null],[6,"DescriptorTemplateOut","bdk::descriptor::template","Type alias for the return type of [<code>DescriptorTemplate</code>], …",null,null],[8,"DescriptorTemplate","","Trait for descriptor templates that can be built into a …",null,null],[10,"build","","Build the complete descriptor",40,[[],[["descriptortemplateout",6],["descriptorerror",4],["result",4]]]],[3,"P2PKH","","P2PKH template. Expands to a descriptor <code>pkh(key)</code>",null,null],[12,"0","","",41,null],[3,"P2WPKH_P2SH","","P2WPKH-P2SH template. Expands to a descriptor …",null,null],[12,"0","","",42,null],[3,"P2WPKH","","P2WPKH template. Expands to a descriptor <code>wpkh(key)</code>",null,null],[12,"0","","",43,null],[3,"BIP44","","BIP44 template. Expands to <code>pkh(key/44\'/0\'/0\'/{0,1}/*)</code>",null,null],[12,"0","","",44,null],[12,"1","","",44,null],[3,"BIP44Public","","BIP44 public template. Expands to <code>pkh(key/{0,1}/*)</code>",null,null],[12,"0","","",45,null],[12,"1","","",45,null],[12,"2","","",45,null],[3,"BIP49","","BIP49 template. Expands to <code>sh(wpkh(key/49\'/0\'/0\'/{0,1}/*))</code>",null,null],[12,"0","","",46,null],[12,"1","","",46,null],[3,"BIP49Public","","BIP49 public template. Expands to <code>sh(wpkh(key/{0,1}/*))</code>",null,null],[12,"0","","",47,null],[12,"1","","",47,null],[12,"2","","",47,null],[3,"BIP84","","BIP84 template. Expands to <code>wpkh(key/84\'/0\'/0\'/{0,1}/*)</code>",null,null],[12,"0","","",48,null],[12,"1","","",48,null],[3,"BIP84Public","","BIP84 public template. Expands to <code>wpkh(key/{0,1}/*)</code>",null,null],[12,"0","","",49,null],[12,"1","","",49,null],[12,"2","","",49,null],[6,"KeyMap","bdk::descriptor","Alias type for a map of public key to secret key",null,null],[4,"Descriptor","","Script descriptor",null,null],[13,"Bare","","A raw scriptpubkey (including pay-to-pubkey) under Legacy …",50,null],[13,"Pkh","","Pay-to-PubKey-Hash",50,null],[13,"Wpkh","","Pay-to-Witness-PubKey-Hash",50,null],[13,"Sh","","Pay-to-ScriptHash(includes nested wsh/wpkh/sorted multi)",50,null],[13,"Wsh","","Pay-to-Witness-ScriptHash with Segwitv0 context",50,null],[4,"Legacy","","Legacy ScriptContext To be used as P2SH scripts For …",null,null],[3,"Miniscript","","Top-level script AST type",null,null],[12,"node","","A node in the Abstract Syntax Tree(",51,null],[12,"ty","","The correctness and malleability type information for the …",51,null],[12,"ext","","Additional information helpful for extra analysis.",51,null],[8,"ScriptContext","","The ScriptContext for Miniscript. Additional type …",null,null],[10,"check_terminal_non_malleable","","Depending on ScriptContext, fragments can be malleable. …",52,[[["terminal",4]],[["scriptcontexterror",4],["result",4]]]],[11,"check_witness","","Check whether the given satisfaction is valid under the …",52,[[],[["scriptcontexterror",4],["result",4]]]],[10,"max_satisfaction_size","","Depending on script context, the size of a satifaction …",52,[[["miniscript",3]],[["usize",15],["option",4]]]],[11,"check_global_consensus_validity","","Depending on script Context, some of the Terminals might …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_global_policy_validity","","Depending on script Context, some of the script resource …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_consensus_validity","","Consensus rules at the Miniscript satisfaction time. It …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_policy_validity","","Policy rules at the Miniscript satisfaction time. It is …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_global_validity","","Check the consensus + policy(if not disabled) rules that …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_validity","","Check the consensus + policy(if not disabled) rules …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"top_level_type_check","","Check whether the top-level is type B",52,[[["miniscript",3]],[["result",4],["error",4]]]],[11,"other_top_level_checks","","Other top level checks that are context specific",52,[[["miniscript",3]],[["result",4],["error",4]]]],[11,"top_level_checks","","Check top level consensus rules.",52,[[["miniscript",3]],[["result",4],["error",4]]]],[4,"Segwitv0","","Segwitv0 ScriptContext",null,null],[3,"DerivedDescriptorKey","","Extended [<code>DescriptorPublicKey</code>] that has been derived",null,null],[6,"ExtendedDescriptor","","Alias for a [<code>Descriptor</code>] that can contain extended keys …",null,null],[6,"DerivedDescriptor","","Alias for a [<code>Descriptor</code>] that contains extended <strong>derived</strong> …",null,null],[6,"HDKeyPaths","","Alias for the type of maps that represent derivation …",null,null],[8,"IntoWalletDescriptor","","Trait for types which can be converted into an […",null,null],[10,"into_wallet_descriptor","","Convert to wallet descriptor",53,[[["network",4],["secp256k1",3]],[["descriptorerror",4],["result",4]]]],[8,"ExtractPolicy","","Trait implemented on [<code>Descriptor</code>]s to add a method to …",null,null],[10,"extract_policy","","Extract the spending [<code>policy</code>]",54,[[["secp256k1",3],["signerscontainer",3]],[["result",4],["descriptorerror",4],["option",4]]]],[0,"keys","bdk","Key formats",null,null],[0,"bip39","bdk::keys","BIP-0039",null,null],[4,"Language","bdk::keys::bip39","The language determines which words will be used in a …",null,null],[13,"English","","",55,null],[13,"ChineseSimplified","","",55,null],[13,"ChineseTraditional","","",55,null],[13,"French","","",55,null],[13,"Italian","","",55,null],[13,"Japanese","","",55,null],[13,"Korean","","",55,null],[13,"Spanish","","",55,null],[3,"Mnemonic","","The primary type in this crate, most tasks require …",null,null],[4,"MnemonicType","","Determines the number of words that will be present in a …",null,null],[13,"Words12","","",56,null],[13,"Words15","","",56,null],[13,"Words18","","",56,null],[13,"Words21","","",56,null],[13,"Words24","","",56,null],[3,"Seed","","The secret value used to derive HD wallet addresses from …",null,null],[6,"MnemonicWithPassphrase","","Type for a BIP39 mnemonic with an optional passphrase",null,null],[4,"DescriptorPublicKey","bdk::keys","The MiniscriptKey corresponding to Descriptors. This can …",null,null],[13,"SinglePub","","Single Public Key",57,null],[13,"XPub","","Xpub",57,null],[4,"DescriptorSecretKey","","A Secret Key that can be either a single key or an Xprv",null,null],[13,"SinglePriv","","Single Secret Key",58,null],[13,"XPrv","","Xprv",58,null],[3,"DescriptorSinglePriv","","A Single Descriptor Secret Key with optional origin …",null,null],[12,"origin","","Origin information",59,null],[12,"key","","The key",59,null],[3,"DescriptorSinglePub","","A Single Descriptor Key with optional origin information",null,null],[12,"origin","","Origin information",60,null],[12,"key","","The key",60,null],[6,"KeyMap","","Alias type for a map of public key to secret key",null,null],[3,"SortedMultiVec","","Contents of a \\\"sortedmulti\\\" descriptor",null,null],[12,"k","","signatures required",61,null],[12,"pks","","public keys inside sorted Multi",61,null],[8,"ScriptContext","","The ScriptContext for Miniscript. Additional type …",null,null],[10,"check_terminal_non_malleable","","Depending on ScriptContext, fragments can be malleable. …",52,[[["terminal",4]],[["scriptcontexterror",4],["result",4]]]],[11,"check_witness","","Check whether the given satisfaction is valid under the …",52,[[],[["scriptcontexterror",4],["result",4]]]],[10,"max_satisfaction_size","","Depending on script context, the size of a satifaction …",52,[[["miniscript",3]],[["usize",15],["option",4]]]],[11,"check_global_consensus_validity","","Depending on script Context, some of the Terminals might …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_global_policy_validity","","Depending on script Context, some of the script resource …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_consensus_validity","","Consensus rules at the Miniscript satisfaction time. It …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_policy_validity","","Policy rules at the Miniscript satisfaction time. It is …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_global_validity","","Check the consensus + policy(if not disabled) rules that …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_validity","","Check the consensus + policy(if not disabled) rules …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"top_level_type_check","","Check whether the top-level is type B",52,[[["miniscript",3]],[["result",4],["error",4]]]],[11,"other_top_level_checks","","Other top level checks that are context specific",52,[[["miniscript",3]],[["result",4],["error",4]]]],[11,"top_level_checks","","Check top level consensus rules.",52,[[["miniscript",3]],[["result",4],["error",4]]]],[6,"ValidNetworks","","Set of valid networks for a key",null,null],[5,"any_network","","Create a set containing mainnet, testnet and regtest",null,[[],["validnetworks",6]]],[5,"mainnet_network","","Create a set only containing mainnet",null,[[],["validnetworks",6]]],[5,"test_networks","","Create a set containing testnet and regtest",null,[[],["validnetworks",6]]],[5,"merge_networks","","Compute the intersection of two sets",null,[[["validnetworks",6]],["validnetworks",6]]],[4,"DescriptorKey","","Container for public or secret keys",null,null],[11,"from_public","","Create an instance given a public key and a set of valid …",62,[[["descriptorpublickey",4],["validnetworks",6]]]],[11,"from_secret","","Create an instance given a secret key and a set of valid …",62,[[["descriptorsecretkey",4],["validnetworks",6]]]],[11,"override_valid_networks","","Override the computed set of valid networks",62,[[["validnetworks",6]]]],[4,"ScriptContextEnum","","Enum representation of the known valid [<code>ScriptContext</code>]s",null,null],[13,"Legacy","","Legacy scripts",63,null],[13,"Segwitv0","","Segwitv0 scripts",63,null],[11,"is_legacy","","Returns whether the script context is […",63,[[],["bool",15]]],[11,"is_segwit_v0","","Returns whether the script context is […",63,[[],["bool",15]]],[8,"ExtScriptContext","","Trait that adds extra useful methods to [<code>ScriptContext</code>]s",null,null],[10,"as_enum","","Returns the [<code>ScriptContext</code>] as a [<code>ScriptContextEnum</code>]",64,[[],["scriptcontextenum",4]]],[11,"is_legacy","","Returns whether the script context is <code>Legacy</code>",64,[[],["bool",15]]],[11,"is_segwit_v0","","Returns whether the script context is <code>Segwitv0</code>",64,[[],["bool",15]]],[8,"IntoDescriptorKey","","Trait for objects that can be turned into a public or …",null,null],[10,"into_descriptor_key","","Turn the key into a [<code>DescriptorKey</code>] within the requested […",65,[[],[["result",4],["keyerror",4],["descriptorkey",4]]]],[4,"ExtendedKey","","Enum for extended keys that can be either <code>xprv</code> or <code>xpub</code>",null,null],[13,"Private","","A private extended key, aka an <code>xprv</code>",66,null],[13,"Public","","A public extended key, aka an <code>xpub</code>",66,null],[11,"has_secret","","Return whether or not the key contains the private data",66,[[],["bool",15]]],[11,"into_xprv","","Transform the [<code>ExtendedKey</code>] into an <code>ExtendedPrivKey</code> for …",66,[[["network",4]],[["extendedprivkey",3],["option",4]]]],[11,"into_xpub","","Transform the [<code>ExtendedKey</code>] into an <code>ExtendedPubKey</code> for the…",66,[[["secp256k1",3],["network",4]],["extendedpubkey",3]]],[8,"DerivableKey","","Trait for keys that can be derived.",null,null],[10,"into_extended_key","","Consume <code>self</code> and turn it into an [<code>ExtendedKey</code>]",67,[[],[["result",4],["keyerror",4],["extendedkey",4]]]],[11,"into_descriptor_key","","Consume <code>self</code> and turn it into a [<code>DescriptorKey</code>] by adding …",67,[[["option",4],["keysource",6],["derivationpath",3]],[["result",4],["keyerror",4],["descriptorkey",4]]]],[3,"GeneratedKey","","Output of a [<code>GeneratableKey</code>] key generation",null,null],[11,"into_key","","Consumes <code>self</code> and returns the key",68,[[]]],[8,"GeneratableKey","","Trait for keys that can be generated",null,null],[16,"Entropy","","Type specifying the amount of entropy required e.g. …",69,null],[16,"Options","","Extra options required by the <code>generate_with_entropy</code>",69,null],[16,"Error","","Returned error in case of failure",69,null],[10,"generate_with_entropy","","Generate a key given the extra options and the entropy",69,[[],[["result",4],["generatedkey",3]]]],[11,"generate","","Generate a key given the options with a random entropy",69,[[],[["result",4],["generatedkey",3]]]],[8,"GeneratableDefaultOptions","","Trait that allows generating a key with the default …",null,null],[11,"generate_with_entropy_default","","Generate a key with the default options and a given …",70,[[],[["result",4],["generatedkey",3]]]],[11,"generate_default","","Generate a key with the default options and a random …",70,[[],[["result",4],["generatedkey",3]]]],[3,"PrivateKeyGenerateOptions","","Options for generating a [<code>PrivateKey</code>]",null,null],[12,"compressed","","Whether the generated key should be \\\"compressed\\\" or not",71,null],[4,"KeyError","","Errors thrown while working with <code>keys</code>",null,null],[13,"InvalidScriptContext","","The key cannot exist in the given script context",72,null],[13,"InvalidNetwork","","The key is not valid for the given network",72,null],[13,"InvalidChecksum","","The key has an invalid checksum",72,null],[13,"Message","","Custom error message",72,null],[13,"BIP32","","BIP32 error",72,null],[13,"Miniscript","","Miniscript error",72,null],[0,"wallet","bdk","Wallet",null,null],[0,"address_validator","bdk::wallet","Address validation callbacks",null,null],[4,"AddressValidatorError","bdk::wallet::address_validator","Errors that can be returned to fail the validation of an …",null,null],[13,"UserRejected","","User rejected the address",73,null],[13,"ConnectionError","","Network connection error",73,null],[13,"TimeoutError","","Network request timeout error",73,null],[13,"InvalidScript","","Invalid script",73,null],[13,"Message","","A custom error message",73,null],[8,"AddressValidator","","Trait to build address validators",null,null],[10,"validate","","Validate or inspect an address",74,[[["hdkeypaths",6],["script",3],["keychainkind",4]],[["result",4],["addressvalidatorerror",4]]]],[0,"coin_selection","bdk::wallet","Coin selection",null,null],[6,"DefaultCoinSelectionAlgorithm","bdk::wallet::coin_selection","Default coin selection algorithm used by <code>TxBuilder</code> if not …",null,null],[3,"CoinSelectionResult","","Result of a successful coin selection",null,null],[12,"selected","","List of outputs selected for use as inputs",75,null],[12,"selected_amount","","Sum of the selected inputs\' value",75,null],[12,"fee_amount","","Total fee amount in satoshi",75,null],[8,"CoinSelectionAlgorithm","","Trait for generalized coin selection algorithms",null,null],[10,"coin_select","","Perform the coin selection",76,[[["f32",15],["feerate",3],["u64",15],["vec",3]],[["coinselectionresult",3],["error",4],["result",4]]]],[3,"LargestFirstCoinSelection","","Simple and dumb coin selection",null,null],[3,"BranchAndBoundCoinSelection","","Branch and bound coin selection",null,null],[11,"new","","Create new instance with target size for change output",77,[[["u64",15]]]],[0,"export","bdk::wallet","Wallet export",null,null],[3,"WalletExport","bdk::wallet::export","Structure that contains the export of a wallet",null,null],[12,"blockheight","","Earliest block to rescan when looking for the wallet\'s …",78,null],[12,"label","","Arbitrary label for the wallet",78,null],[11,"export_wallet","","Export a wallet",78,[[["wallet",3],["bool",15],["str",15]],[["result",4],["str",15]]]],[11,"descriptor","","Return the external descriptor",78,[[],["string",3]]],[11,"change_descriptor","","Return the internal descriptor, if present",78,[[],[["option",4],["string",3]]]],[0,"signer","bdk::wallet","Generalized signers",null,null],[4,"SignerId","bdk::wallet::signer","Identifier of a signer in the <code>SignersContainers</code>. Used as …",null,null],[13,"PkHash","","Bitcoin HASH160 (RIPEMD160 after SHA256) hash of an ECDSA …",79,null],[13,"Fingerprint","","The fingerprint of a BIP32 extended key",79,null],[13,"Dummy","","Dummy identifier",79,null],[4,"SignerError","","Signing error",null,null],[13,"MissingKey","","The private key is missing for the required public key",80,null],[13,"InvalidKey","","The private key in use has the right fingerprint but …",80,null],[13,"UserCanceled","","The user canceled the operation",80,null],[13,"InputIndexOutOfRange","","Input index is out of range",80,null],[13,"MissingNonWitnessUtxo","","The <code>non_witness_utxo</code> field of the transaction is required …",80,null],[13,"InvalidNonWitnessUtxo","","The <code>non_witness_utxo</code> specified is invalid",80,null],[13,"MissingWitnessUtxo","","The <code>witness_utxo</code> field of the transaction is required to …",80,null],[13,"MissingWitnessScript","","The <code>witness_script</code> field of the transaction is requied to …",80,null],[13,"MissingHDKeypath","","The fingerprint and derivation path are missing from the …",80,null],[8,"Signer","","Trait for signers",null,null],[10,"sign","","Sign a PSBT",81,[[["usize",15],["partiallysignedtransaction",3],["option",4],["secp256k1",3]],[["signererror",4],["result",4]]]],[10,"sign_whole_tx","","Return whether or not the signer signs the whole …",81,[[],["bool",15]]],[10,"id","","Return the [<code>SignerId</code>] for this signer",81,[[["secp256k1",3]],["signerid",4]]],[11,"descriptor_secret_key","","Return the secret key for the signer",81,[[],[["descriptorsecretkey",4],["option",4]]]],[3,"SignerOrdering","","Defines the order in which signers are called",null,null],[12,"0","","",82,null],[3,"SignersContainer","","Container for multiple signers",null,null],[11,"as_key_map","","Create a map of public keys to secret keys",83,[[["secp256k1",3]],["keymap",6]]],[11,"new","","Default constructor",83,[[]]],[11,"add_external","","Adds an external signer to the container for the …",83,[[["arc",3],["signerordering",3],["signer",8],["signerid",4]],[["arc",3],["option",4]]]],[11,"remove","","Removes a signer from the container and returns it",83,[[["signerid",4],["signerordering",3]],[["arc",3],["option",4]]]],[11,"ids","","Returns the list of identifiers of all the signers in the …",83,[[],[["signerid",4],["vec",3]]]],[11,"signers","","Returns the list of signers in the container, sorted by …",83,[[],[["vec",3],["arc",3]]]],[11,"find","","Finds the signer with lowest ordering for a given id in …",83,[[["signerid",4]],[["option",4],["arc",3]]]],[0,"time","bdk::wallet","Cross-platform time",null,null],[5,"get_timestamp","bdk::wallet::time","Return the current timestamp in seconds",null,[[],["u64",15]]],[0,"tx_builder","bdk::wallet","Transaction builder",null,null],[8,"TxBuilderContext","bdk::wallet::tx_builder","Context in which the [<code>TxBuilder</code>] is valid",null,null],[3,"CreateTx","","Marker type to indicate the [<code>TxBuilder</code>] is being used to …",null,null],[3,"BumpFee","","Marker type to indicate the [<code>TxBuilder</code>] is being used to …",null,null],[3,"TxBuilder","","A transaction builder",null,null],[11,"fee_rate","","Set a custom fee rate",84,[[["feerate",3]]]],[11,"fee_absolute","","Set an absolute fee",84,[[["u64",15]]]],[11,"policy_path","","Set the policy path to use while creating the transaction …",84,[[["btreemap",3],["string",3],["vec",3],["keychainkind",4]]]],[11,"add_utxos","","Add the list of outpoints to the internal list of UTXOs …",84,[[],[["result",4],["error",4]]]],[11,"add_utxo","","Add a utxo to the internal list of utxos that <strong>must</strong> be …",84,[[["outpoint",3]],[["result",4],["error",4]]]],[11,"manually_selected_only","","Only spend utxos added by <code>add_utxo</code>.",84,[[]]],[11,"unspendable","","Replace the internal list of unspendable utxos with a new …",84,[[["vec",3],["outpoint",3]]]],[11,"add_unspendable","","Add a utxo to the internal list of unspendable utxos",84,[[["outpoint",3]]]],[11,"sighash","","Sign with a specific sig hash",84,[[["sighashtype",4]]]],[11,"ordering","","Choose the ordering for inputs and outputs of the …",84,[[["txordering",4]]]],[11,"nlocktime","","Use a specific nLockTime while creating the transaction",84,[[["u32",15]]]],[11,"version","","Build a transaction with a specific version",84,[[["i32",15]]]],[11,"do_not_spend_change","","Do not spend change outputs",84,[[]]],[11,"only_spend_change","","Only spend change outputs",84,[[]]],[11,"change_policy","","Set a specific [<code>ChangeSpendPolicy</code>]. See […",84,[[["changespendpolicy",4]]]],[11,"force_non_witness_utxo","","Fill-in the <code>psbt::Input::non_witness_utxo</code> field even if …",84,[[]]],[11,"include_output_redeem_witness_script","","Fill-in the <code>psbt::Output::redeem_script</code> and …",84,[[]]],[11,"add_global_xpubs","","Fill-in the <code>PSBT_GLOBAL_XPUB</code> field with the extended keys …",84,[[]]],[11,"drain_wallet","","Spend all the available inputs. This respects filters …",84,[[]]],[11,"coin_selection","","Choose the coin selection algorithm",84,[[["coinselectionalgorithm",8]],[["coinselectionalgorithm",8],["txbuilder",3]]]],[11,"finish","","Finish the building the transaction.",84,[[],[["result",4],["error",4]]]],[11,"set_recipients","","Replace the recipients already added with a new list",84,[[["vec",3]]]],[11,"add_recipient","","Add a recipient to the internal list",84,[[["u64",15],["script",3]]]],[11,"set_single_recipient","","Set a single recipient that will get all the selected …",84,[[["script",3]]]],[11,"enable_rbf","","Enable signaling RBF",84,[[]]],[11,"enable_rbf_with_sequence","","Enable signaling RBF with a specific nSequence value",84,[[["u32",15]]]],[11,"maintain_single_recipient","","Bump the fees of a transaction made with …",84,[[],[["result",4],["error",4]]]],[4,"TxOrdering","","Ordering of the transaction\'s inputs and outputs",null,null],[13,"Shuffle","","Randomized (default)",85,null],[13,"Untouched","","Unchanged",85,null],[13,"BIP69Lexicographic","","BIP69 / Lexicographic",85,null],[11,"sort_tx","","Sort transaction inputs and outputs by [<code>TxOrdering</code>] …",85,[[["transaction",3]]]],[4,"ChangeSpendPolicy","","Policy regarding the use of change outputs when creating …",null,null],[13,"ChangeAllowed","","Use both change and non-change outputs (default)",86,null],[13,"OnlyChange","","Only use change outputs (see [<code>TxBuilder::only_spend_change</code>…",86,null],[13,"ChangeForbidden","","Only use non-change outputs (see […",86,null],[8,"IsDust","bdk::wallet","Trait to check if a value is below the dust limit",null,null],[10,"is_dust","","Check whether or not a value is below dust limit",87,[[],["bool",15]]],[3,"Wallet","","A Bitcoin wallet",null,null],[11,"new_offline","","Create a new \\\"offline\\\" wallet",88,[[["option",4],["network",4],["intowalletdescriptor",8]],[["error",4],["result",4]]]],[11,"get_new_address","","Return a newly generated address using the external …",88,[[],[["result",4],["address",3],["error",4]]]],[11,"is_mine","","Return whether or not a <code>script</code> is part of this wallet …",88,[[["script",3]],[["bool",15],["result",4],["error",4]]]],[11,"list_unspent","","Return the list of unspent outputs of this wallet",88,[[],[["vec",3],["result",4],["error",4]]]],[11,"get_utxo","","Returns the <code>UTXO</code> owned by this wallet corresponding to …",88,[[["outpoint",3]],[["option",4],["result",4],["error",4]]]],[11,"list_transactions","","Return the list of transactions made and received by the …",88,[[["bool",15]],[["result",4],["vec",3],["error",4]]]],[11,"get_balance","","Return the balance, meaning the sum of this wallet\'s …",88,[[],[["error",4],["result",4],["u64",15]]]],[11,"add_signer","","Add an external signer",88,[[["arc",3],["signerordering",3],["keychainkind",4],["signer",8]]]],[11,"add_address_validator","","Add an address validator",88,[[["arc",3],["addressvalidator",8]]]],[11,"build_tx","","Start building a transaction.",88,[[],[["createtx",3],["txbuilder",3],["defaultcoinselectionalgorithm",6]]]],[11,"build_fee_bump","","Bump the fee of a transaction previously created with …",88,[[["txid",3]],[["result",4],["txbuilder",3],["error",4]]]],[11,"sign","","Sign a transaction with all the wallet\'s signers, in the …",88,[[["u32",15],["psbt",3],["option",4]],[["result",4],["error",4]]]],[11,"policies","","Return the spending policies for the wallet\'s descriptor",88,[[["keychainkind",4]],[["error",4],["result",4],["option",4]]]],[11,"public_descriptor","","Return the \\\"public\\\" version of the wallet\'s descriptor, …",88,[[["keychainkind",4]],[["result",4],["option",4],["error",4]]]],[11,"finalize_psbt","","Try to finalize a PSBT",88,[[["u32",15],["psbt",3],["option",4]],[["result",4],["error",4]]]],[11,"secp_ctx","","Return the secp256k1 context used for all signing …",88,[[],["secp256k1",3]]],[11,"get_descriptor_for_keychain","","Returns the descriptor used to create adddresses for a …",88,[[["keychainkind",4]],["extendeddescriptor",6]]],[11,"new","","Create a new \\\"online\\\" wallet",88,[[["option",4],["network",4],["intowalletdescriptor",8]],[["error",4],["result",4]]]],[11,"sync","","Sync the internal database with the blockchain",88,[[["u32",15],["progress",8],["option",4]],[["result",4],["error",4]]]],[11,"client","","Return a reference to the internal blockchain client",88,[[]]],[11,"network","","Get the Bitcoin network the wallet is using.",88,[[],["network",4]]],[11,"broadcast","","Broadcast a transaction to the network",88,[[["transaction",3]],[["error",4],["result",4],["txid",3]]]],[4,"Error","bdk","Errors that can be thrown by the <code>Wallet</code>",null,null],[13,"InvalidU32Bytes","","Wrong number of bytes found when trying to convert to u32",89,null],[13,"Generic","","Generic error",89,null],[13,"ScriptDoesntHaveAddressForm","","This error is thrown when trying to convert Bare and …",89,null],[13,"SingleRecipientMultipleOutputs","","Found multiple outputs when <code>single_recipient</code> option has …",89,null],[13,"SingleRecipientNoInputs","","<code>single_recipient</code> option is selected but neither …",89,null],[13,"NoRecipients","","Cannot build a tx without recipients",89,null],[13,"NoUtxosSelected","","<code>manually_selected_only</code> option is selected but no utxo has …",89,null],[13,"OutputBelowDustLimit","","Output created is under the dust limit, 546 satoshis",89,null],[13,"InsufficientFunds","","Wallet\'s UTXO set is not enough to cover recipient\'s …",89,null],[12,"needed","bdk::Error","Sats needed for some transaction",90,null],[12,"available","","Sats available for spending",90,null],[13,"BnBTotalTriesExceeded","bdk","Branch and bound coin selection possible attempts with …",89,null],[13,"BnBNoExactMatch","","Branch and bound coin selection tries to avoid needing a …",89,null],[13,"UnknownUTXO","","Happens when trying to spend an UTXO that is not in the …",89,null],[13,"TransactionNotFound","","Thrown when a tx is not found in the internal database",89,null],[13,"TransactionConfirmed","","Happens when trying to bump a transaction that is already …",89,null],[13,"IrreplaceableTransaction","","Trying to replace a tx that has a sequence >= <code>0xFFFFFFFE</code>",89,null],[13,"FeeRateTooLow","","When bumping a tx the fee rate requested is lower than …",89,null],[12,"required","bdk::Error","Required fee rate (satoshi/vbyte)",91,null],[13,"FeeTooLow","bdk","When bumping a tx the absolute fee requested is lower …",89,null],[12,"required","bdk::Error","Required fee absolute value (satoshi)",92,null],[13,"MissingKeyOrigin","bdk","In order to use the <code>TxBuilder::add_global_xpubs</code> option …",89,null],[13,"Key","","Error while working with <code>keys</code>",89,null],[13,"ChecksumMismatch","","Descriptor checksum mismatch",89,null],[13,"SpendingPolicyRequired","","Spending policy is not compatible with this <code>KeychainKind</code>",89,null],[13,"InvalidPolicyPathError","","Error while extracting and manipulating policies",89,null],[13,"Signer","","Signing error",89,null],[13,"InvalidProgressValue","","Progress value must be between <code>0.0</code> (included) and <code>100.0</code> …",89,null],[13,"ProgressUpdateError","","Progress update error (maybe the channel has been closed)",89,null],[13,"InvalidOutpoint","","Requested outpoint doesn\'t exist in the tx (vout greater …",89,null],[13,"Descriptor","","Error related to the parsing and usage of descriptors",89,null],[13,"AddressValidator","","Error that can be returned to fail the validation of an …",89,null],[13,"Encode","","Encoding error",89,null],[13,"Miniscript","","Miniscript error",89,null],[13,"BIP32","","BIP32 error",89,null],[13,"Secp256k1","","An ECDSA error",89,null],[13,"JSON","","Error serializing or deserializing JSON data",89,null],[13,"Hex","","Hex decoding error",89,null],[13,"PSBT","","Partially signed bitcoin transaction error",89,null],[13,"Electrum","","Electrum client error",89,null],[13,"Esplora","","Esplora client error",89,null],[13,"CompactFilters","","Compact filters client error)",89,null],[13,"Sled","","Sled database error",89,null],[4,"KeychainKind","","Types of keychains",null,null],[13,"External","","External",93,null],[13,"Internal","","Internal, usually used for change outputs",93,null],[3,"FeeRate","","Fee rate",null,null],[3,"UTXO","","A wallet unspent output",null,null],[12,"outpoint","","Reference to a transaction output",94,null],[12,"txout","","Transaction output",94,null],[12,"keychain","","Type of keychain",94,null],[3,"TransactionDetails","","A wallet transaction",null,null],[12,"transaction","","Optional transaction",95,null],[12,"txid","","Transaction id",95,null],[12,"timestamp","","Timestamp",95,null],[12,"received","","Received value (sats)",95,null],[12,"sent","","Sent value (sats)",95,null],[12,"fees","","Fee value (sats)",95,null],[12,"height","","Confirmed in block height, <code>None</code> means unconfirmed",95,null],[5,"version","","Get the version of BDK at runtime",null,[[],["str",15]]],[14,"descriptor","","Macro to write full descriptors with code",null,null],[14,"fragment","","Macro to write descriptor fragments with code",null,null],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_string","","",89,[[],["string",3]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"vzip","","",89,[[]]],[11,"init","","",89,[[],["usize",15]]],[11,"deref","","",89,[[["usize",15]]]],[11,"deref_mut","","",89,[[["usize",15]]]],[11,"drop","","",89,[[["usize",15]]]],[11,"from","bdk::blockchain::any","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"from","bdk::blockchain::electrum","",96,[[]]],[11,"into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"vzip","","",96,[[]]],[11,"init","","",96,[[],["usize",15]]],[11,"deref","","",96,[[["usize",15]]]],[11,"deref_mut","","",96,[[["usize",15]]]],[11,"drop","","",96,[[["usize",15]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","bdk::blockchain::esplora","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[],["usize",15]]],[11,"deref","","",3,[[["usize",15]]]],[11,"deref_mut","","",3,[[["usize",15]]]],[11,"drop","","",3,[[["usize",15]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[],["usize",15]]],[11,"deref","","",5,[[["usize",15]]]],[11,"deref_mut","","",5,[[["usize",15]]]],[11,"drop","","",5,[[["usize",15]]]],[11,"from","bdk::blockchain::compact_filters","",97,[[]]],[11,"into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"vzip","","",97,[[]]],[11,"init","","",97,[[],["usize",15]]],[11,"deref","","",97,[[["usize",15]]]],[11,"deref_mut","","",97,[[["usize",15]]]],[11,"drop","","",97,[[["usize",15]]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"vzip","","",98,[[]]],[11,"init","","",98,[[],["usize",15]]],[11,"deref","","",98,[[["usize",15]]]],[11,"deref_mut","","",98,[[["usize",15]]]],[11,"drop","","",98,[[["usize",15]]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[],["usize",15]]],[11,"deref","","",6,[[["usize",15]]]],[11,"deref_mut","","",6,[[["usize",15]]]],[11,"drop","","",6,[[["usize",15]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[],["usize",15]]],[11,"deref","","",7,[[["usize",15]]]],[11,"deref_mut","","",7,[[["usize",15]]]],[11,"drop","","",7,[[["usize",15]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[],["usize",15]]],[11,"deref","","",8,[[["usize",15]]]],[11,"deref_mut","","",8,[[["usize",15]]]],[11,"drop","","",8,[[["usize",15]]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[],["usize",15]]],[11,"deref","","",9,[[["usize",15]]]],[11,"deref_mut","","",9,[[["usize",15]]]],[11,"drop","","",9,[[["usize",15]]]],[11,"from","bdk::blockchain","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"equivalent","","",10,[[],["bool",15]]],[11,"init","","",10,[[],["usize",15]]],[11,"deref","","",10,[[["usize",15]]]],[11,"deref_mut","","",10,[[["usize",15]]]],[11,"drop","","",10,[[["usize",15]]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"vzip","","",99,[[]]],[11,"init","","",99,[[],["usize",15]]],[11,"deref","","",99,[[["usize",15]]]],[11,"deref_mut","","",99,[[["usize",15]]]],[11,"drop","","",99,[[["usize",15]]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"vzip","","",100,[[]]],[11,"init","","",100,[[],["usize",15]]],[11,"deref","","",100,[[["usize",15]]]],[11,"deref_mut","","",100,[[["usize",15]]]],[11,"drop","","",100,[[["usize",15]]]],[11,"from","bdk::database::any","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[],["usize",15]]],[11,"deref","","",14,[[["usize",15]]]],[11,"deref_mut","","",14,[[["usize",15]]]],[11,"drop","","",14,[[["usize",15]]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"init","","",15,[[],["usize",15]]],[11,"deref","","",15,[[["usize",15]]]],[11,"deref_mut","","",15,[[["usize",15]]]],[11,"drop","","",15,[[["usize",15]]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"init","","",16,[[],["usize",15]]],[11,"deref","","",16,[[["usize",15]]]],[11,"deref_mut","","",16,[[["usize",15]]]],[11,"drop","","",16,[[["usize",15]]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"init","","",17,[[],["usize",15]]],[11,"deref","","",17,[[["usize",15]]]],[11,"deref_mut","","",17,[[["usize",15]]]],[11,"drop","","",17,[[["usize",15]]]],[11,"from","bdk::database::memory","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"init","","",18,[[],["usize",15]]],[11,"deref","","",18,[[["usize",15]]]],[11,"deref_mut","","",18,[[["usize",15]]]],[11,"drop","","",18,[[["usize",15]]]],[11,"from","bdk::descriptor","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"to_string","","",50,[[],["string",3]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"equivalent","","",50,[[],["bool",15]]],[11,"init","","",50,[[],["usize",15]]],[11,"deref","","",50,[[["usize",15]]]],[11,"deref_mut","","",50,[[["usize",15]]]],[11,"drop","","",50,[[["usize",15]]]],[11,"from","bdk::keys","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"to_string","","",57,[[],["string",3]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"equivalent","","",57,[[],["bool",15]]],[11,"init","","",57,[[],["usize",15]]],[11,"deref","","",57,[[["usize",15]]]],[11,"deref_mut","","",57,[[["usize",15]]]],[11,"drop","","",57,[[["usize",15]]]],[11,"as_enum","bdk::descriptor","",101,[[],["scriptcontextenum",4]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"vzip","","",101,[[]]],[11,"equivalent","","",101,[[],["bool",15]]],[11,"init","","",101,[[],["usize",15]]],[11,"deref","","",101,[[["usize",15]]]],[11,"deref_mut","","",101,[[["usize",15]]]],[11,"drop","","",101,[[["usize",15]]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"to_string","","",51,[[],["string",3]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"equivalent","","",51,[[],["bool",15]]],[11,"init","","",51,[[],["usize",15]]],[11,"deref","","",51,[[["usize",15]]]],[11,"deref_mut","","",51,[[["usize",15]]]],[11,"drop","","",51,[[["usize",15]]]],[11,"as_enum","","",102,[[],["scriptcontextenum",4]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"vzip","","",102,[[]]],[11,"equivalent","","",102,[[],["bool",15]]],[11,"init","","",102,[[],["usize",15]]],[11,"deref","","",102,[[["usize",15]]]],[11,"deref_mut","","",102,[[["usize",15]]]],[11,"drop","","",102,[[["usize",15]]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"to_string","","",103,[[],["string",3]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"vzip","","",103,[[]]],[11,"equivalent","","",103,[[],["bool",15]]],[11,"init","","",103,[[],["usize",15]]],[11,"deref","","",103,[[["usize",15]]]],[11,"deref_mut","","",103,[[["usize",15]]]],[11,"drop","","",103,[[["usize",15]]]],[11,"from","bdk::descriptor::error","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_string","","",23,[[],["string",3]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"init","","",23,[[],["usize",15]]],[11,"deref","","",23,[[["usize",15]]]],[11,"deref_mut","","",23,[[["usize",15]]]],[11,"drop","","",23,[[["usize",15]]]],[11,"from","bdk::descriptor::policy","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"vzip","","",104,[[]]],[11,"init","","",104,[[],["usize",15]]],[11,"deref","","",104,[[["usize",15]]]],[11,"deref_mut","","",104,[[["usize",15]]]],[11,"drop","","",104,[[["usize",15]]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"init","","",24,[[],["usize",15]]],[11,"deref","","",24,[[["usize",15]]]],[11,"deref_mut","","",24,[[["usize",15]]]],[11,"drop","","",24,[[["usize",15]]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"init","","",33,[[],["usize",15]]],[11,"deref","","",33,[[["usize",15]]]],[11,"deref_mut","","",33,[[["usize",15]]]],[11,"drop","","",33,[[["usize",15]]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"init","","",37,[[],["usize",15]]],[11,"deref","","",37,[[["usize",15]]]],[11,"deref_mut","","",37,[[["usize",15]]]],[11,"drop","","",37,[[["usize",15]]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"equivalent","","",38,[[],["bool",15]]],[11,"init","","",38,[[],["usize",15]]],[11,"deref","","",38,[[["usize",15]]]],[11,"deref_mut","","",38,[[["usize",15]]]],[11,"drop","","",38,[[["usize",15]]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_string","","",39,[[],["string",3]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"equivalent","","",39,[[],["bool",15]]],[11,"init","","",39,[[],["usize",15]]],[11,"deref","","",39,[[["usize",15]]]],[11,"deref_mut","","",39,[[["usize",15]]]],[11,"drop","","",39,[[["usize",15]]]],[11,"into_wallet_descriptor","bdk::descriptor::template","",41,[[["secp256k1",3],["network",4]],[["result",4],["error",4]]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"init","","",41,[[],["usize",15]]],[11,"deref","","",41,[[["usize",15]]]],[11,"deref_mut","","",41,[[["usize",15]]]],[11,"drop","","",41,[[["usize",15]]]],[11,"into_wallet_descriptor","","",42,[[["secp256k1",3],["network",4]],[["result",4],["error",4]]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"init","","",42,[[],["usize",15]]],[11,"deref","","",42,[[["usize",15]]]],[11,"deref_mut","","",42,[[["usize",15]]]],[11,"drop","","",42,[[["usize",15]]]],[11,"into_wallet_descriptor","","",43,[[["secp256k1",3],["network",4]],[["result",4],["error",4]]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"init","","",43,[[],["usize",15]]],[11,"deref","","",43,[[["usize",15]]]],[11,"deref_mut","","",43,[[["usize",15]]]],[11,"drop","","",43,[[["usize",15]]]],[11,"into_wallet_descriptor","","",44,[[["secp256k1",3],["network",4]],[["result",4],["error",4]]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"init","","",44,[[],["usize",15]]],[11,"deref","","",44,[[["usize",15]]]],[11,"deref_mut","","",44,[[["usize",15]]]],[11,"drop","","",44,[[["usize",15]]]],[11,"into_wallet_descriptor","","",45,[[["secp256k1",3],["network",4]],[["result",4],["error",4]]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"init","","",45,[[],["usize",15]]],[11,"deref","","",45,[[["usize",15]]]],[11,"deref_mut","","",45,[[["usize",15]]]],[11,"drop","","",45,[[["usize",15]]]],[11,"into_wallet_descriptor","","",46,[[["secp256k1",3],["network",4]],[["result",4],["error",4]]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"init","","",46,[[],["usize",15]]],[11,"deref","","",46,[[["usize",15]]]],[11,"deref_mut","","",46,[[["usize",15]]]],[11,"drop","","",46,[[["usize",15]]]],[11,"into_wallet_descriptor","","",47,[[["secp256k1",3],["network",4]],[["result",4],["error",4]]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"init","","",47,[[],["usize",15]]],[11,"deref","","",47,[[["usize",15]]]],[11,"deref_mut","","",47,[[["usize",15]]]],[11,"drop","","",47,[[["usize",15]]]],[11,"into_wallet_descriptor","","",48,[[["secp256k1",3],["network",4]],[["result",4],["error",4]]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"init","","",48,[[],["usize",15]]],[11,"deref","","",48,[[["usize",15]]]],[11,"deref_mut","","",48,[[["usize",15]]]],[11,"drop","","",48,[[["usize",15]]]],[11,"into_wallet_descriptor","","",49,[[["secp256k1",3],["network",4]],[["result",4],["error",4]]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"init","","",49,[[],["usize",15]]],[11,"deref","","",49,[[["usize",15]]]],[11,"deref_mut","","",49,[[["usize",15]]]],[11,"drop","","",49,[[["usize",15]]]],[11,"from","bdk::keys::bip39","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"init","","",55,[[],["usize",15]]],[11,"deref","","",55,[[["usize",15]]]],[11,"deref_mut","","",55,[[["usize",15]]]],[11,"drop","","",55,[[["usize",15]]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"to_string","","",105,[[],["string",3]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"to_hex","","Outputs the hash in hexadecimal form",105,[[],["string",3]]],[11,"vzip","","",105,[[]]],[11,"init","","",105,[[],["usize",15]]],[11,"deref","","",105,[[["usize",15]]]],[11,"deref_mut","","",105,[[["usize",15]]]],[11,"drop","","",105,[[["usize",15]]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"to_string","","",56,[[],["string",3]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"init","","",56,[[],["usize",15]]],[11,"deref","","",56,[[["usize",15]]]],[11,"deref_mut","","",56,[[["usize",15]]]],[11,"drop","","",56,[[["usize",15]]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"to_hex","","Outputs the hash in hexadecimal form",106,[[],["string",3]]],[11,"write_base32","","",106,[[],["result",4]]],[11,"base32_len","","",106,[[],["usize",15]]],[11,"check_base32","","",106,[[],[["result",4],["vec",3]]]],[11,"vzip","","",106,[[]]],[11,"init","","",106,[[],["usize",15]]],[11,"deref","","",106,[[["usize",15]]]],[11,"deref_mut","","",106,[[["usize",15]]]],[11,"drop","","",106,[[["usize",15]]]],[11,"from","bdk::keys","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_string","","",58,[[],["string",3]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"init","","",58,[[],["usize",15]]],[11,"deref","","",58,[[["usize",15]]]],[11,"deref_mut","","",58,[[["usize",15]]]],[11,"drop","","",58,[[["usize",15]]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"init","","",59,[[],["usize",15]]],[11,"deref","","",59,[[["usize",15]]]],[11,"deref_mut","","",59,[[["usize",15]]]],[11,"drop","","",59,[[["usize",15]]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"equivalent","","",60,[[],["bool",15]]],[11,"init","","",60,[[],["usize",15]]],[11,"deref","","",60,[[["usize",15]]]],[11,"deref_mut","","",60,[[["usize",15]]]],[11,"drop","","",60,[[["usize",15]]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"to_string","","",61,[[],["string",3]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"equivalent","","",61,[[],["bool",15]]],[11,"init","","",61,[[],["usize",15]]],[11,"deref","","",61,[[["usize",15]]]],[11,"deref_mut","","",61,[[["usize",15]]]],[11,"drop","","",61,[[["usize",15]]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"init","","",62,[[],["usize",15]]],[11,"deref","","",62,[[["usize",15]]]],[11,"deref_mut","","",62,[[["usize",15]]]],[11,"drop","","",62,[[["usize",15]]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"equivalent","","",63,[[],["bool",15]]],[11,"init","","",63,[[],["usize",15]]],[11,"deref","","",63,[[["usize",15]]]],[11,"deref_mut","","",63,[[["usize",15]]]],[11,"drop","","",63,[[["usize",15]]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"vzip","","",66,[[]]],[11,"init","","",66,[[],["usize",15]]],[11,"deref","","",66,[[["usize",15]]]],[11,"deref_mut","","",66,[[["usize",15]]]],[11,"drop","","",66,[[["usize",15]]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"vzip","","",68,[[]]],[11,"init","","",68,[[],["usize",15]]],[11,"deref","","",68,[[["usize",15]]]],[11,"deref_mut","","",68,[[["usize",15]]]],[11,"drop","","",68,[[["usize",15]]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"vzip","","",71,[[]]],[11,"init","","",71,[[],["usize",15]]],[11,"deref","","",71,[[["usize",15]]]],[11,"deref_mut","","",71,[[["usize",15]]]],[11,"drop","","",71,[[["usize",15]]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_string","","",72,[[],["string",3]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"vzip","","",72,[[]]],[11,"init","","",72,[[],["usize",15]]],[11,"deref","","",72,[[["usize",15]]]],[11,"deref_mut","","",72,[[["usize",15]]]],[11,"drop","","",72,[[["usize",15]]]],[11,"from","bdk","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"write_base32","","",93,[[],["result",4]]],[11,"base32_len","","",93,[[],["usize",15]]],[11,"check_base32","","",93,[[],[["result",4],["vec",3]]]],[11,"vzip","","",93,[[]]],[11,"equivalent","","",93,[[],["bool",15]]],[11,"init","","",93,[[],["usize",15]]],[11,"deref","","",93,[[["usize",15]]]],[11,"deref_mut","","",93,[[["usize",15]]]],[11,"drop","","",93,[[["usize",15]]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"vzip","","",107,[[]]],[11,"init","","",107,[[],["usize",15]]],[11,"deref","","",107,[[["usize",15]]]],[11,"deref_mut","","",107,[[["usize",15]]]],[11,"drop","","",107,[[["usize",15]]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"vzip","","",94,[[]]],[11,"equivalent","","",94,[[],["bool",15]]],[11,"init","","",94,[[],["usize",15]]],[11,"deref","","",94,[[["usize",15]]]],[11,"deref_mut","","",94,[[["usize",15]]]],[11,"drop","","",94,[[["usize",15]]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"vzip","","",95,[[]]],[11,"equivalent","","",95,[[],["bool",15]]],[11,"init","","",95,[[],["usize",15]]],[11,"deref","","",95,[[["usize",15]]]],[11,"deref_mut","","",95,[[["usize",15]]]],[11,"drop","","",95,[[["usize",15]]]],[11,"from","bdk::wallet::address_validator","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"to_string","","",73,[[],["string",3]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"vzip","","",73,[[]]],[11,"equivalent","","",73,[[],["bool",15]]],[11,"init","","",73,[[],["usize",15]]],[11,"deref","","",73,[[["usize",15]]]],[11,"deref_mut","","",73,[[["usize",15]]]],[11,"drop","","",73,[[["usize",15]]]],[11,"from","bdk::wallet::coin_selection","",75,[[]]],[11,"into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"init","","",75,[[],["usize",15]]],[11,"deref","","",75,[[["usize",15]]]],[11,"deref_mut","","",75,[[["usize",15]]]],[11,"drop","","",75,[[["usize",15]]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"vzip","","",108,[[]]],[11,"init","","",108,[[],["usize",15]]],[11,"deref","","",108,[[["usize",15]]]],[11,"deref_mut","","",108,[[["usize",15]]]],[11,"drop","","",108,[[["usize",15]]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"init","","",77,[[],["usize",15]]],[11,"deref","","",77,[[["usize",15]]]],[11,"deref_mut","","",77,[[["usize",15]]]],[11,"drop","","",77,[[["usize",15]]]],[11,"from","bdk::wallet::export","",78,[[]]],[11,"into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"init","","",78,[[],["usize",15]]],[11,"deref","","",78,[[["usize",15]]]],[11,"deref_mut","","",78,[[["usize",15]]]],[11,"drop","","",78,[[["usize",15]]]],[11,"from","bdk::wallet::signer","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"equivalent","","",79,[[],["bool",15]]],[11,"init","","",79,[[],["usize",15]]],[11,"deref","","",79,[[["usize",15]]]],[11,"deref_mut","","",79,[[["usize",15]]]],[11,"drop","","",79,[[["usize",15]]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"to_string","","",80,[[],["string",3]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"equivalent","","",80,[[],["bool",15]]],[11,"init","","",80,[[],["usize",15]]],[11,"deref","","",80,[[["usize",15]]]],[11,"deref_mut","","",80,[[["usize",15]]]],[11,"drop","","",80,[[["usize",15]]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"equivalent","","",82,[[],["bool",15]]],[11,"init","","",82,[[],["usize",15]]],[11,"deref","","",82,[[["usize",15]]]],[11,"deref_mut","","",82,[[["usize",15]]]],[11,"drop","","",82,[[["usize",15]]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"init","","",83,[[],["usize",15]]],[11,"deref","","",83,[[["usize",15]]]],[11,"deref_mut","","",83,[[["usize",15]]]],[11,"drop","","",83,[[["usize",15]]]],[11,"from","bdk::wallet::tx_builder","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"vzip","","",109,[[]]],[11,"init","","",109,[[],["usize",15]]],[11,"deref","","",109,[[["usize",15]]]],[11,"deref_mut","","",109,[[["usize",15]]]],[11,"drop","","",109,[[["usize",15]]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"vzip","","",110,[[]]],[11,"init","","",110,[[],["usize",15]]],[11,"deref","","",110,[[["usize",15]]]],[11,"deref_mut","","",110,[[["usize",15]]]],[11,"drop","","",110,[[["usize",15]]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"init","","",84,[[],["usize",15]]],[11,"deref","","",84,[[["usize",15]]]],[11,"deref_mut","","",84,[[["usize",15]]]],[11,"drop","","",84,[[["usize",15]]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"vzip","","",85,[[]]],[11,"equivalent","","",85,[[],["bool",15]]],[11,"init","","",85,[[],["usize",15]]],[11,"deref","","",85,[[["usize",15]]]],[11,"deref_mut","","",85,[[["usize",15]]]],[11,"drop","","",85,[[["usize",15]]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"vzip","","",86,[[]]],[11,"equivalent","","",86,[[],["bool",15]]],[11,"init","","",86,[[],["usize",15]]],[11,"deref","","",86,[[["usize",15]]]],[11,"deref_mut","","",86,[[["usize",15]]]],[11,"drop","","",86,[[["usize",15]]]],[11,"from","bdk::wallet","",88,[[]]],[11,"into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"vzip","","",88,[[]]],[11,"init","","",88,[[],["usize",15]]],[11,"deref","","",88,[[["usize",15]]]],[11,"deref_mut","","",88,[[["usize",15]]]],[11,"drop","","",88,[[["usize",15]]]],[11,"check_terminal_non_malleable","bdk::descriptor","",101,[[["terminal",4]],[["scriptcontexterror",4],["result",4]]]],[11,"check_witness","","",101,[[],[["scriptcontexterror",4],["result",4]]]],[11,"check_global_consensus_validity","","",101,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_consensus_validity","","",101,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_policy_validity","","",101,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"max_satisfaction_size","","",101,[[["miniscript",3]],[["usize",15],["option",4]]]],[11,"check_terminal_non_malleable","","",102,[[["terminal",4]],[["scriptcontexterror",4],["result",4]]]],[11,"check_witness","","",102,[[],[["scriptcontexterror",4],["result",4]]]],[11,"check_global_consensus_validity","","",102,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_consensus_validity","","",102,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_global_policy_validity","","",102,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_policy_validity","","",102,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"max_satisfaction_size","","",102,[[["miniscript",3]],[["usize",15],["option",4]]]],[11,"fmt","bdk::keys","",61,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",58,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","bdk::descriptor","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",51,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","bdk::keys","",57,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",57,[[]]],[11,"hash","","",60,[[]]],[11,"hash","bdk::descriptor","",101,[[]]],[11,"hash","","",102,[[]]],[11,"hash","","",51,[[]]],[11,"eq","","",102,[[["segwitv0",4]],["bool",15]]],[11,"eq","bdk::keys","",61,[[["sortedmultivec",3]],["bool",15]]],[11,"ne","","",61,[[["sortedmultivec",3]],["bool",15]]],[11,"eq","","",60,[[["descriptorsinglepub",3]],["bool",15]]],[11,"ne","","",60,[[["descriptorsinglepub",3]],["bool",15]]],[11,"eq","bdk::descriptor","",50,[[["descriptor",4]],["bool",15]]],[11,"ne","","",50,[[["descriptor",4]],["bool",15]]],[11,"eq","","",101,[[["legacy",4]],["bool",15]]],[11,"eq","","",51,[[["miniscript",3]],["bool",15]]],[11,"eq","bdk::keys","",57,[[["descriptorpublickey",4]],["bool",15]]],[11,"ne","","",57,[[["descriptorpublickey",4]],["bool",15]]],[11,"from_tree","bdk::descriptor","Parse an expression tree into a descriptor",50,[[["tree",3]],[["result",4],["error",4],["descriptor",4]]]],[11,"from_tree","","Parse an expression tree into a Miniscript. As a general …",51,[[["tree",3]],[["result",4],["miniscript",3],["error",4]]]],[11,"partial_cmp","","",51,[[["miniscript",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",101,[[["legacy",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","bdk::keys","",61,[[["sortedmultivec",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","bdk::descriptor","",102,[[["segwitv0",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","bdk::keys","",57,[[["descriptorpublickey",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",60,[[["descriptorsinglepub",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","bdk::descriptor","",50,[[["descriptor",4]],[["option",4],["ordering",4]]]],[11,"is_uncompressed","bdk::keys","",57,[[],["bool",15]]],[11,"to_pubkeyhash","","",57,[[],["descriptorpublickey",4]]],[11,"clone","bdk::descriptor","",51,[[],["miniscript",3]]],[11,"clone","","",102,[[],["segwitv0",4]]],[11,"clone","bdk::keys","",61,[[],["sortedmultivec",3]]],[11,"clone","bdk::descriptor","",50,[[],["descriptor",4]]],[11,"clone","bdk::keys","",60,[[],["descriptorsinglepub",3]]],[11,"clone","bdk::descriptor","",101,[[],["legacy",4]]],[11,"clone","bdk::keys","",57,[[],["descriptorpublickey",4]]],[11,"translate_pk","bdk::descriptor","Convert a descriptor using abstract keys to one using …",50,[[],[["result",4],["descriptor",4]]]],[11,"translate_pk","","This will panic if translatefpk returns an uncompressed …",51,[[],["result",4]]],[11,"sanity_check","","Whether the descriptor is safe Checks whether all the …",50,[[],[["result",4],["error",4]]]],[11,"address","","Computes the Bitcoin address of the descriptor, if one …",50,[[["network",4]],[["result",4],["error",4],["address",3]]]],[11,"script_pubkey","","Computes the scriptpubkey of the descriptor",50,[[],["script",3]]],[11,"unsigned_script_sig","","Computes the scriptSig that will be in place for an …",50,[[],["script",3]]],[11,"explicit_script","","Computes the \\\"witness script\\\" of the descriptor, i.e. the …",50,[[],["script",3]]],[11,"get_satisfaction","","Returns satisfying witness and scriptSig to spend an …",50,[[],[["error",4],["result",4]]]],[11,"max_satisfaction_weight","","Computes an upper bound on the weight of a satisfying …",50,[[],[["result",4],["usize",15],["error",4]]]],[11,"script_code","","Get the <code>scriptCode</code> of a transaction output.",50,[[],["script",3]]],[11,"cmp","bdk::keys","",61,[[["sortedmultivec",3]],["ordering",4]]],[11,"cmp","bdk::descriptor","",50,[[["descriptor",4]],["ordering",4]]],[11,"cmp","","",102,[[["segwitv0",4]],["ordering",4]]],[11,"cmp","bdk::keys","",60,[[["descriptorsinglepub",3]],["ordering",4]]],[11,"cmp","","",57,[[["descriptorpublickey",4]],["ordering",4]]],[11,"cmp","bdk::descriptor","",51,[[["miniscript",3]],["ordering",4]]],[11,"cmp","","",101,[[["legacy",4]],["ordering",4]]],[11,"for_each_key","","",50,[[],["bool",15]]],[11,"for_each_key","","",51,[[],["bool",15]]],[11,"for_each_key","bdk::keys","",61,[[],["bool",15]]],[11,"fmt","","",57,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","bdk::descriptor","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",101,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","bdk::keys","",59,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",60,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",58,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","bdk::descriptor","",102,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",51,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","bdk::keys","",61,[[["formatter",3]],[["result",4],["error",3]]]],[11,"lift","bdk::descriptor","",51,[[],[["error",4],["result",4],["policy",4]]]],[11,"lift","","",50,[[],[["error",4],["result",4],["policy",4]]]],[11,"lift","bdk::keys","",61,[[],[["error",4],["result",4],["policy",4]]]],[11,"from_str","","",58,[[["str",15]],[["result",4],["descriptorsecretkey",4]]]],[11,"from_str","","",57,[[["str",15]],[["descriptorpublickey",4],["result",4]]]],[11,"from_str","bdk::descriptor","",50,[[["str",15]],[["result",4],["error",4],["descriptor",4]]]],[11,"from_str","","",51,[[["str",15]],[["result",4],["miniscript",3],["error",4]]]],[11,"fmt","bdk::keys::bip39","",106,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",105,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",105,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",56,[[["formatter",3]],[["result",4],["error",3]]]],[11,"drop","","",105,[[]]],[11,"drop","","",106,[[]]],[11,"zeroize","","",105,[[]]],[11,"zeroize","","",55,[[]]],[11,"zeroize","","",106,[[]]],[11,"clone","","",56,[[],["mnemonictype",4]]],[11,"clone","","",55,[[],["language",4]]],[11,"clone","","",106,[[],["seed",3]]],[11,"clone","","",105,[[],["mnemonic",3]]],[11,"fmt","","",105,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",106,[[["formatter",3]],[["result",4],["error",3]]]],[11,"eq","","",55,[[["language",4]],["bool",15]]],[11,"as_ref","","",106,[[]]],[11,"as_ref","","",105,[[],["str",15]]],[11,"default","","",56,[[],["mnemonictype",4]]],[11,"default","","",55,[[],["language",4]]],[11,"fmt","","",105,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",56,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",106,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",55,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from_config","bdk::blockchain::any","",0,[[],[["error",4],["result",4]]]],[11,"from_config","bdk::blockchain::electrum","",96,[[],[["error",4],["result",4]]]],[11,"from_config","bdk::blockchain::esplora","",3,[[],[["error",4],["result",4]]]],[11,"from_config","bdk::blockchain::compact_filters","",6,[[],[["error",4],["result",4]]]],[11,"update","bdk::blockchain","",99,[[["option",4],["f32",15],["string",3]],[["result",4],["error",4]]]],[11,"update","","",100,[[["option",4],["f32",15],["string",3]],[["result",4],["error",4]]]],[11,"set_script_pubkey","bdk::database::any","",14,[[["keychainkind",4],["u32",15],["script",3]],[["result",4],["error",4]]]],[11,"set_utxo","","",14,[[["utxo",3]],[["result",4],["error",4]]]],[11,"set_raw_tx","","",14,[[["transaction",3]],[["result",4],["error",4]]]],[11,"set_tx","","",14,[[["transactiondetails",3]],[["result",4],["error",4]]]],[11,"set_last_index","","",14,[[["u32",15],["keychainkind",4]],[["result",4],["error",4]]]],[11,"del_script_pubkey_from_path","","",14,[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]]],[11,"del_path_from_script_pubkey","","",14,[[["script",3]],[["option",4],["error",4],["result",4]]]],[11,"del_utxo","","",14,[[["outpoint",3]],[["option",4],["result",4],["error",4]]]],[11,"del_raw_tx","","",14,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[11,"del_tx","","",14,[[["bool",15],["txid",3]],[["result",4],["error",4],["option",4]]]],[11,"del_last_index","","",14,[[["keychainkind",4]],[["error",4],["option",4],["result",4]]]],[11,"set_script_pubkey","","",15,[[["keychainkind",4],["u32",15],["script",3]],[["result",4],["error",4]]]],[11,"set_utxo","","",15,[[["utxo",3]],[["result",4],["error",4]]]],[11,"set_raw_tx","","",15,[[["transaction",3]],[["result",4],["error",4]]]],[11,"set_tx","","",15,[[["transactiondetails",3]],[["result",4],["error",4]]]],[11,"set_last_index","","",15,[[["u32",15],["keychainkind",4]],[["result",4],["error",4]]]],[11,"del_script_pubkey_from_path","","",15,[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]]],[11,"del_path_from_script_pubkey","","",15,[[["script",3]],[["option",4],["error",4],["result",4]]]],[11,"del_utxo","","",15,[[["outpoint",3]],[["option",4],["result",4],["error",4]]]],[11,"del_raw_tx","","",15,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[11,"del_tx","","",15,[[["bool",15],["txid",3]],[["result",4],["error",4],["option",4]]]],[11,"del_last_index","","",15,[[["keychainkind",4]],[["error",4],["option",4],["result",4]]]],[11,"set_script_pubkey","bdk::database::memory","",18,[[["keychainkind",4],["u32",15],["script",3]],[["result",4],["error",4]]]],[11,"set_utxo","","",18,[[["utxo",3]],[["result",4],["error",4]]]],[11,"set_raw_tx","","",18,[[["transaction",3]],[["result",4],["error",4]]]],[11,"set_tx","","",18,[[["transactiondetails",3]],[["result",4],["error",4]]]],[11,"set_last_index","","",18,[[["u32",15],["keychainkind",4]],[["result",4],["error",4]]]],[11,"del_script_pubkey_from_path","","",18,[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]]],[11,"del_path_from_script_pubkey","","",18,[[["script",3]],[["option",4],["error",4],["result",4]]]],[11,"del_utxo","","",18,[[["outpoint",3]],[["option",4],["result",4],["error",4]]]],[11,"del_raw_tx","","",18,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[11,"del_tx","","",18,[[["bool",15],["txid",3]],[["result",4],["error",4],["option",4]]]],[11,"del_last_index","","",18,[[["keychainkind",4]],[["error",4],["option",4],["result",4]]]],[11,"check_descriptor_checksum","bdk::database::any","",14,[[["asref",8],["keychainkind",4]],[["result",4],["error",4]]]],[11,"iter_script_pubkeys","","",14,[[["option",4],["keychainkind",4]],[["result",4],["error",4],["vec",3]]]],[11,"iter_utxos","","",14,[[],[["vec",3],["result",4],["error",4]]]],[11,"iter_raw_txs","","",14,[[],[["result",4],["vec",3],["error",4]]]],[11,"iter_txs","","",14,[[["bool",15]],[["result",4],["vec",3],["error",4]]]],[11,"get_script_pubkey_from_path","","",14,[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]]],[11,"get_path_from_script_pubkey","","",14,[[["script",3]],[["option",4],["error",4],["result",4]]]],[11,"get_utxo","","",14,[[["outpoint",3]],[["option",4],["result",4],["error",4]]]],[11,"get_raw_tx","","",14,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[11,"get_tx","","",14,[[["bool",15],["txid",3]],[["result",4],["error",4],["option",4]]]],[11,"get_last_index","","",14,[[["keychainkind",4]],[["error",4],["option",4],["result",4]]]],[11,"increment_last_index","","",14,[[["keychainkind",4]],[["u32",15],["result",4],["error",4]]]],[11,"check_descriptor_checksum","bdk::database::memory","",18,[[["asref",8],["keychainkind",4]],[["result",4],["error",4]]]],[11,"iter_script_pubkeys","","",18,[[["option",4],["keychainkind",4]],[["result",4],["error",4],["vec",3]]]],[11,"iter_utxos","","",18,[[],[["vec",3],["result",4],["error",4]]]],[11,"iter_raw_txs","","",18,[[],[["result",4],["vec",3],["error",4]]]],[11,"iter_txs","","",18,[[["bool",15]],[["result",4],["vec",3],["error",4]]]],[11,"get_script_pubkey_from_path","","",18,[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]]],[11,"get_path_from_script_pubkey","","",18,[[["script",3]],[["option",4],["error",4],["result",4]]]],[11,"get_utxo","","",18,[[["outpoint",3]],[["option",4],["result",4],["error",4]]]],[11,"get_raw_tx","","",18,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[11,"get_tx","","",18,[[["bool",15],["txid",3]],[["result",4],["error",4],["option",4]]]],[11,"get_last_index","","",18,[[["keychainkind",4]],[["error",4],["option",4],["result",4]]]],[11,"increment_last_index","","",18,[[["keychainkind",4]],[["u32",15],["result",4],["error",4]]]],[11,"begin_batch","bdk::database::any","",14,[[]]],[11,"commit_batch","","",14,[[],[["result",4],["error",4]]]],[11,"begin_batch","bdk::database::memory","",18,[[]]],[11,"commit_batch","","",18,[[],[["result",4],["error",4]]]],[11,"from_config","bdk::database::any","",14,[[],[["error",4],["result",4]]]],[11,"from_config","bdk::database::memory","",18,[[],[["error",4],["result",4]]]],[11,"build","bdk::descriptor::template","",41,[[],[["descriptortemplateout",6],["descriptorerror",4],["result",4]]]],[11,"build","","",42,[[],[["descriptortemplateout",6],["descriptorerror",4],["result",4]]]],[11,"build","","",43,[[],[["descriptortemplateout",6],["descriptorerror",4],["result",4]]]],[11,"build","","",44,[[],[["descriptortemplateout",6],["descriptorerror",4],["result",4]]]],[11,"build","","",45,[[],[["descriptortemplateout",6],["descriptorerror",4],["result",4]]]],[11,"build","","",46,[[],[["descriptortemplateout",6],["descriptorerror",4],["result",4]]]],[11,"build","","",47,[[],[["descriptortemplateout",6],["descriptorerror",4],["result",4]]]],[11,"build","","",48,[[],[["descriptortemplateout",6],["descriptorerror",4],["result",4]]]],[11,"build","","",49,[[],[["descriptortemplateout",6],["descriptorerror",4],["result",4]]]],[11,"into_wallet_descriptor","bdk","",111,[[["network",4],["secp256k1",3]],[["descriptorerror",4],["result",4]]]],[11,"into_wallet_descriptor","","",112,[[["network",4],["secp256k1",3]],[["descriptorerror",4],["result",4]]]],[11,"extract_policy","bdk::descriptor","",51,[[["secp256k1",3],["signerscontainer",3]],[["error",4],["result",4],["option",4]]]],[11,"extract_policy","","",50,[[["secp256k1",3],["signerscontainer",3]],[["error",4],["result",4],["option",4]]]],[11,"into_descriptor_key","bdk::keys","",68,[[],[["result",4],["keyerror",4],["descriptorkey",4]]]],[11,"into_descriptor_key","","",62,[[],[["result",4],["keyerror",4],["descriptorkey",4]]]],[11,"into_descriptor_key","","",57,[[],[["result",4],["keyerror",4],["descriptorkey",4]]]],[11,"into_descriptor_key","","",58,[[],[["result",4],["keyerror",4],["descriptorkey",4]]]],[11,"into_extended_key","bdk::keys::bip39","",106,[[],[["result",4],["keyerror",4],["extendedkey",4]]]],[11,"into_descriptor_key","","",106,[[["option",4],["keysource",6],["derivationpath",3]],[["result",4],["keyerror",4],["descriptorkey",4]]]],[11,"into_extended_key","bdk","",113,[[],[["result",4],["keyerror",4],["extendedkey",4]]]],[11,"into_descriptor_key","","",113,[[["option",4],["keysource",6],["derivationpath",3]],[["result",4],["keyerror",4],["descriptorkey",4]]]],[11,"into_extended_key","bdk::keys::bip39","",105,[[],[["result",4],["keyerror",4],["extendedkey",4]]]],[11,"into_descriptor_key","","",105,[[["option",4],["keysource",6],["derivationpath",3]],[["result",4],["keyerror",4],["descriptorkey",4]]]],[11,"into_extended_key","bdk::keys","",66,[[],[["result",4],["keyerror",4],["extendedkey",4]]]],[11,"into_extended_key","","",68,[[],[["result",4],["keyerror",4],["extendedkey",4]]]],[11,"into_descriptor_key","","",68,[[["option",4],["keysource",6],["derivationpath",3]],[["result",4],["keyerror",4],["descriptorkey",4]]]],[11,"generate_with_entropy","bdk::keys::bip39","",105,[[],[["result",4],["generatedkey",3]]]],[11,"coin_select","bdk::wallet::coin_selection","",108,[[["f32",15],["feerate",3],["u64",15],["vec",3]],[["coinselectionresult",3],["error",4],["result",4]]]],[11,"coin_select","","",77,[[["f32",15],["feerate",3],["u64",15],["vec",3]],[["coinselectionresult",3],["error",4],["result",4]]]],[11,"get_capabilities","bdk::blockchain::any","",0,[[],[["hashset",3],["capability",4]]]],[11,"setup","","",0,[[["usize",15],["option",4],["progress",8]],[["result",4],["error",4]]]],[11,"sync","","",0,[[["usize",15],["option",4],["progress",8]],[["result",4],["error",4]]]],[11,"get_tx","","",0,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[11,"broadcast","","",0,[[["transaction",3]],[["result",4],["error",4]]]],[11,"get_height","","",0,[[],[["u32",15],["result",4],["error",4]]]],[11,"estimate_fee","","",0,[[["usize",15]],[["feerate",3],["error",4],["result",4]]]],[11,"get_capabilities","bdk::blockchain::electrum","",96,[[],[["hashset",3],["capability",4]]]],[11,"setup","","",96,[[["usize",15],["option",4],["progress",8]],[["result",4],["error",4]]]],[11,"get_tx","","",96,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[11,"broadcast","","",96,[[["transaction",3]],[["result",4],["error",4]]]],[11,"get_height","","",96,[[],[["u32",15],["result",4],["error",4]]]],[11,"estimate_fee","","",96,[[["usize",15]],[["feerate",3],["error",4],["result",4]]]],[11,"get_capabilities","bdk::blockchain::esplora","",3,[[],[["hashset",3],["capability",4]]]],[11,"setup","","",3,[[["usize",15],["option",4],["progress",8]],[["result",4],["error",4]]]],[11,"get_tx","","",3,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[11,"broadcast","","",3,[[["transaction",3]],[["result",4],["error",4]]]],[11,"get_height","","",3,[[],[["u32",15],["result",4],["error",4]]]],[11,"estimate_fee","","",3,[[["usize",15]],[["feerate",3],["error",4],["result",4]]]],[11,"get_capabilities","bdk::blockchain::compact_filters","",6,[[],[["hashset",3],["capability",4]]]],[11,"setup","","",6,[[["usize",15],["option",4],["progress",8]],[["result",4],["error",4]]]],[11,"get_tx","","",6,[[["txid",3]],[["option",4],["error",4],["result",4]]]],[11,"broadcast","","",6,[[["transaction",3]],[["result",4],["error",4]]]],[11,"get_height","","",6,[[],[["u32",15],["result",4],["error",4]]]],[11,"estimate_fee","","",6,[[["usize",15]],[["feerate",3],["error",4],["result",4]]]],[11,"as_ref","bdk","",93,[[]]],[11,"from","","",89,[[["error",4]]]],[11,"from","","",89,[[["addressvalidatorerror",4]]]],[11,"from","","",89,[[["policyerror",4]]]],[11,"from","","",89,[[["signererror",4]]]],[11,"from","","",89,[[["keyerror",4]],["error",4]]],[11,"from","","",89,[[["error",4]]]],[11,"from","","",89,[[["error",4]]]],[11,"from","","",89,[[["error",4]]]],[11,"from","","",89,[[["error",4]]]],[11,"from","","",89,[[["error",3]]]],[11,"from","","",89,[[["error",4]]]],[11,"from","","",89,[[["error",4]]]],[11,"from","","",89,[[["error",4]]]],[11,"from","","",89,[[["esploraerror",4]]]],[11,"from","","",89,[[["error",4]]]],[11,"from","","",89,[[["compactfilterserror",4]]]],[11,"from","bdk::blockchain::any","",0,[[["electrumblockchain",3]]]],[11,"from","","",0,[[["esplorablockchain",3]]]],[11,"from","","",0,[[["compactfiltersblockchain",3]]]],[11,"from","","",1,[[["electrumblockchainconfig",3]]]],[11,"from","","",1,[[["esplorablockchainconfig",3]]]],[11,"from","","",1,[[["compactfiltersblockchainconfig",3]]]],[11,"from","bdk::blockchain::electrum","",96,[[["client",3]]]],[11,"from","bdk::blockchain::esplora","",5,[[["error",3]]]],[11,"from","","",5,[[["parseinterror",3]]]],[11,"from","","",5,[[["error",4]]]],[11,"from","","",5,[[["error",4]]]],[11,"from","bdk::blockchain::compact_filters","",9,[[["error",3]]]],[11,"from","","",9,[[["error",3]]]],[11,"from","","",9,[[["error",4]]]],[11,"from","","",9,[[["systemtimeerror",3]]]],[11,"from","","",9,[[["error",4]]]],[11,"from","bdk::database::any","",14,[[["memorydatabase",3]]]],[11,"from","","",14,[[["tree",3]]]],[11,"from","","",15,[[]]],[11,"from","","",15,[[]]],[11,"from","","",17,[[]]],[11,"from","","",17,[[["sleddbconfiguration",3]]]],[11,"from","bdk::descriptor::error","",23,[[["keyerror",4]],["error",4]]],[11,"from","","",23,[[["error",4]]]],[11,"from","","",23,[[["error",4]]]],[11,"from","","",23,[[["error",4]]]],[11,"from","","",23,[[["error",4]]]],[11,"from","","",23,[[["error",4]]]],[11,"from","","",23,[[["policyerror",4]]]],[11,"from","bdk::descriptor::policy","",33,[[["bool",15]]]],[11,"from","","",37,[[["satisfiableitem",4]]]],[11,"from","bdk::keys","",66,[[["extendedpubkey",3]]]],[11,"from","","",66,[[["extendedprivkey",3]]]],[11,"from","","",72,[[["error",4]]]],[11,"from","","",72,[[["error",4]]]],[11,"from","bdk::wallet::signer","",79,[[["hash",3]],["signerid",4]]],[11,"from","","",79,[[["fingerprint",3]],["signerid",4]]],[11,"from","","",83,[[["keymap",6]],["signerscontainer",3]]],[11,"clone","bdk::blockchain","",10,[[],["capability",4]]],[11,"clone","","",99,[[],["noopprogress",3]]],[11,"clone","","",100,[[],["logprogress",3]]],[11,"clone","bdk::descriptor","",103,[[],["deriveddescriptorkey",3]]],[11,"clone","bdk::descriptor::policy","",104,[[],["pkorf",3]]],[11,"clone","","",24,[[],["satisfiableitem",4]]],[11,"clone","","",33,[[],["satisfaction",4]]],[11,"clone","","",37,[[],["policy",3]]],[11,"clone","","",38,[[],["condition",3]]],[11,"clone","bdk::keys","",63,[[],["scriptcontextenum",4]]],[11,"clone","","",71,[[],["privatekeygenerateoptions",3]]],[11,"clone","bdk","",93,[[],["keychainkind",4]]],[11,"clone","","",107,[[],["feerate",3]]],[11,"clone","","",94,[[],["utxo",3]]],[11,"clone","","",95,[[],["transactiondetails",3]]],[11,"clone","bdk::wallet::address_validator","",73,[[],["addressvalidatorerror",4]]],[11,"clone","bdk::wallet::signer","",79,[[],["signerid",4]]],[11,"clone","","",80,[[],["signererror",4]]],[11,"clone","","",82,[[],["signerordering",3]]],[11,"clone","","",83,[[],["signerscontainer",3]]],[11,"clone","bdk::wallet::tx_builder","",109,[[],["createtx",3]]],[11,"clone","","",110,[[],["bumpfee",3]]],[11,"clone","","",84,[[],["txbuilder",3]]],[11,"clone","","",85,[[],["txordering",4]]],[11,"clone","","",86,[[],["changespendpolicy",4]]],[11,"default","bdk::blockchain::compact_filters","",97,[[],["mempool",3]]],[11,"default","bdk::database::memory","",18,[[],["memorydatabase",3]]],[11,"default","bdk::descriptor::policy","",104,[[],["pkorf",3]]],[11,"default","","",38,[[],["condition",3]]],[11,"default","bdk::keys","",71,[[]]],[11,"default","bdk","",107,[[]]],[11,"default","","",95,[[],["transactiondetails",3]]],[11,"default","bdk::wallet::coin_selection","",108,[[],["largestfirstcoinselection",3]]],[11,"default","","",77,[[]]],[11,"default","bdk::wallet::signer","",82,[[]]],[11,"default","","",83,[[],["signerscontainer",3]]],[11,"default","bdk::wallet::tx_builder","",109,[[],["createtx",3]]],[11,"default","","",110,[[],["bumpfee",3]]],[11,"default","","",85,[[]]],[11,"default","","",86,[[]]],[11,"cmp","bdk::descriptor","",103,[[],["ordering",4]]],[11,"cmp","bdk::descriptor::policy","",38,[[["condition",3]],["ordering",4]]],[11,"cmp","bdk::wallet::signer","",79,[[["signerid",4]],["ordering",4]]],[11,"cmp","","",82,[[["signerordering",3]],["ordering",4]]],[11,"cmp","bdk::wallet::tx_builder","",85,[[["txordering",4]],["ordering",4]]],[11,"cmp","","",86,[[["changespendpolicy",4]],["ordering",4]]],[11,"eq","bdk::blockchain","",10,[[["capability",4]],["bool",15]]],[11,"eq","bdk::descriptor","",103,[[],["bool",15]]],[11,"eq","bdk::descriptor::policy","",38,[[["condition",3]],["bool",15]]],[11,"ne","","",38,[[["condition",3]],["bool",15]]],[11,"eq","","",39,[[["policyerror",4]],["bool",15]]],[11,"ne","","",39,[[["policyerror",4]],["bool",15]]],[11,"eq","bdk::keys","",63,[[["scriptcontextenum",4]],["bool",15]]],[11,"eq","bdk","",93,[[["keychainkind",4]],["bool",15]]],[11,"eq","","",107,[[["feerate",3]],["bool",15]]],[11,"ne","","",107,[[["feerate",3]],["bool",15]]],[11,"eq","","",94,[[["utxo",3]],["bool",15]]],[11,"ne","","",94,[[["utxo",3]],["bool",15]]],[11,"eq","","",95,[[["transactiondetails",3]],["bool",15]]],[11,"ne","","",95,[[["transactiondetails",3]],["bool",15]]],[11,"eq","bdk::wallet::address_validator","",73,[[["addressvalidatorerror",4]],["bool",15]]],[11,"ne","","",73,[[["addressvalidatorerror",4]],["bool",15]]],[11,"eq","bdk::wallet::signer","",79,[[["signerid",4]],["bool",15]]],[11,"ne","","",79,[[["signerid",4]],["bool",15]]],[11,"eq","","",80,[[["signererror",4]],["bool",15]]],[11,"eq","","",82,[[["signerordering",3]],["bool",15]]],[11,"ne","","",82,[[["signerordering",3]],["bool",15]]],[11,"eq","bdk::wallet::tx_builder","",85,[[["txordering",4]],["bool",15]]],[11,"eq","","",86,[[["changespendpolicy",4]],["bool",15]]],[11,"partial_cmp","bdk::descriptor","",103,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","bdk::descriptor::policy","",38,[[["condition",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","bdk","",107,[[["feerate",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","bdk::wallet::signer","",79,[[["signerid",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",82,[[["signerordering",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","bdk::wallet::tx_builder","",85,[[["txordering",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",86,[[["changespendpolicy",4]],[["option",4],["ordering",4]]]],[11,"to_string","bdk::wallet::export","",78,[[],["string",3]]],[11,"deref","bdk::descriptor","",103,[[]]],[11,"deref","bdk::keys","",68,[[]]],[11,"fmt","bdk","",89,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain::any","",1,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain::electrum","",2,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain::esplora","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain::compact_filters","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain","",10,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::database::any","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::database::memory","",18,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::descriptor","",103,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::descriptor::error","",23,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::descriptor::policy","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::keys","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","bdk","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::address_validator","",73,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::coin_selection","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::export","",78,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::signer","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::tx_builder","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet","",88,[[["formatter",3]],["result",6]]],[11,"fmt","bdk","",89,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain::esplora","",5,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain::compact_filters","",9,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::descriptor","",103,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::descriptor::error","",23,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::descriptor::policy","",39,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::keys","",72,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::address_validator","",73,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::signer","",80,[[["formatter",3]],["result",6]]],[11,"hash","bdk::blockchain","",10,[[]]],[11,"hash","bdk::descriptor","",103,[[]]],[11,"hash","bdk::descriptor::policy","",38,[[]]],[11,"hash","bdk","",93,[[]]],[11,"hash","bdk::wallet::signer","",79,[[]]],[11,"hash","bdk::wallet::tx_builder","",85,[[]]],[11,"hash","","",86,[[]]],[11,"from_str","bdk::wallet::export","",78,[[["str",15]],["result",4]]],[11,"serialize","bdk::blockchain::any","",1,[[],["result",4]]],[11,"serialize","bdk::blockchain::electrum","",2,[[],["result",4]]],[11,"serialize","bdk::blockchain::esplora","",4,[[],["result",4]]],[11,"serialize","bdk::blockchain::compact_filters","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","bdk::database::any","",16,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","bdk::descriptor::policy","",104,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","","",37,[[],["result",4]]],[11,"serialize","","",38,[[],["result",4]]],[11,"serialize","bdk","",93,[[],["result",4]]],[11,"serialize","","",94,[[],["result",4]]],[11,"serialize","","",95,[[],["result",4]]],[11,"serialize","bdk::wallet::export","",78,[[],["result",4]]],[11,"deserialize","bdk::blockchain::any","",1,[[],["result",4]]],[11,"deserialize","bdk::blockchain::electrum","",2,[[],["result",4]]],[11,"deserialize","bdk::blockchain::esplora","",4,[[],["result",4]]],[11,"deserialize","bdk::blockchain::compact_filters","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","bdk::database::any","",16,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","bdk","",93,[[],["result",4]]],[11,"deserialize","","",94,[[],["result",4]]],[11,"deserialize","","",95,[[],["result",4]]],[11,"deserialize","bdk::wallet::export","",78,[[],["result",4]]],[11,"to_pubkeyhash","bdk::descriptor","",103,[[]]],[11,"is_uncompressed","","",103,[[],["bool",15]]],[11,"serialized_len","","",103,[[],["usize",15]]],[11,"to_public_key","","",103,[[],["publickey",3]]],[11,"hash_to_hash160","","",103,[[],["hash",3]]],[11,"new","bdk::blockchain::compact_filters","Create a new empty mempool",97,[[]]],[11,"add_tx","","Add a transaction to the mempool",97,[[["transaction",3]]]],[11,"get_tx","","Look-up a transaction in the mempool given an [<code>Inventory</code>] …",97,[[["inventory",4]],[["transaction",3],["option",4]]]],[11,"has_tx","","Return whether or not the mempool contains a transaction …",97,[[["txid",3]],["bool",15]]],[11,"iter_txs","","Return the list of transactions contained in the mempool",97,[[],[["vec",3],["transaction",3]]]],[11,"connect","","Connect to a peer over a plaintext TCP connection",98,[[["arc",3],["mempool",3],["network",4],["tosocketaddrs",8]],[["result",4],["compactfilterserror",4]]]],[11,"connect_proxy","","Connect to a peer through a SOCKS5 proxy, optionally by …",98,[[["option",4],["totargetaddr",8],["arc",3],["mempool",3],["network",4],["tosocketaddrs",8]],[["result",4],["compactfilterserror",4]]]],[11,"get_version","","Return the [<code>VersionMessage</code>] sent by the peer",98,[[],["versionmessage",3]]],[11,"get_network","","Return the Bitcoin [<code>Network</code>] in use",98,[[],["network",4]]],[11,"get_mempool","","Return the mempool used by this peer",98,[[],[["arc",3],["mempool",3]]]],[11,"is_connected","","Return whether or not the peer is still connected",98,[[],["bool",15]]],[11,"send","","Send a raw Bitcoin message to the peer",98,[[["networkmessage",4]],[["result",4],["compactfilterserror",4]]]],[11,"recv","","Waits for a specific incoming Bitcoin message, optionally …",98,[[["option",4],["str",15],["duration",3]],[["option",4],["compactfilterserror",4],["result",4]]]],[11,"new_pk","bdk::descriptor","Create a new pk descriptor",50,[[],["descriptor",4]]],[11,"new_pkh","","Create a new PkH descriptor",50,[[],["descriptor",4]]],[11,"new_wpkh","","Create a new Wpkh descriptor Will return Err if …",50,[[],[["result",4],["error",4],["descriptor",4]]]],[11,"new_sh_wpkh","","Create a new sh wrapped wpkh from <code>Pk</code>. Errors when …",50,[[],[["result",4],["error",4],["descriptor",4]]]],[11,"new_sh","","Create a new sh for a given redeem script Errors when …",50,[[["legacy",4],["miniscript",3]],[["result",4],["error",4],["descriptor",4]]]],[11,"new_wsh","","Create a new wsh descriptor from witness script Errors …",50,[[["miniscript",3],["segwitv0",4]],[["result",4],["error",4],["descriptor",4]]]],[11,"new_sh_wsh","","Create a new sh wrapped wsh descriptor with witness script…",50,[[["miniscript",3],["segwitv0",4]],[["result",4],["error",4],["descriptor",4]]]],[11,"new_bare","","Create a new bare descriptor from witness script Errors …",50,[[["miniscript",3],["barectx",4]],[["result",4],["error",4],["descriptor",4]]]],[11,"new_sh_sortedmulti","","Create a new sh sortedmulti descriptor with threshold <code>k</code> …",50,[[["usize",15],["vec",3],["global",3]],[["result",4],["error",4],["descriptor",4]]]],[11,"new_sh_wsh_sortedmulti","","Create a new sh wrapped wsh sortedmulti descriptor from …",50,[[["usize",15],["vec",3],["global",3]],[["result",4],["error",4],["descriptor",4]]]],[11,"new_wsh_sortedmulti","","Create a new wsh sorted multi descriptor Errors when …",50,[[["usize",15],["vec",3],["global",3]],[["result",4],["error",4],["descriptor",4]]]],[11,"desc_type","","Get the [DescriptorType] of [Descriptor]",50,[[],["descriptortype",4]]],[11,"is_deriveable","","Whether or not the descriptor has any wildcards",50,[[],["bool",15]]],[11,"derive","","Derives all wildcard keys in the descriptor using the …",50,[[["u32",15]],[["descriptorpublickey",4],["descriptor",4]]]],[11,"parse_descriptor","","Parse a descriptor that may contain secret keys",50,[[["str",15],["secp256k1",3]],[["error",4],["result",4]]]],[11,"to_string_with_secret","","Serialize a descriptor to string with its secret keys",50,[[["hashmap",3]],["string",3]]],[11,"master_fingerprint","bdk::keys","The fingerprint of the master key associated with this key",57,[[],["fingerprint",3]]],[11,"full_derivation_path","","Full path, from the master key",57,[[],["derivationpath",3]]],[11,"is_deriveable","","Whether or not the key has a wildcards",57,[[],["bool",15]]],[11,"derive","","If this public key has a wildcard, replace it by the …",57,[[["u32",15]],["descriptorpublickey",4]]],[11,"derive_public_key","","Computes the public key corresponding to this descriptor …",57,[[["secp256k1",3]],[["result",4],["conversionerror",4],["publickey",3]]]],[11,"requires_sig","bdk::descriptor","Whether all spend paths of miniscript require a signature",51,[[],["bool",15]]],[11,"is_non_malleable","","Whether the miniscript is malleable",51,[[],["bool",15]]],[11,"within_resource_limits","","Whether the miniscript can exceed the resource …",51,[[],["bool",15]]],[11,"has_mixed_timelocks","","Whether the miniscript contains a combination of timelocks",51,[[],["bool",15]]],[11,"has_repeated_keys","","Whether the miniscript has repeated Pk or Pkh",51,[[],["bool",15]]],[11,"sanity_check","","Check whether the underlying Miniscript is safe under the …",51,[[],[["result",4],["analysiserror",4]]]],[11,"iter","","Creates a new [Iter] iterator that will iterate over all […",51,[[],["iter",3]]],[11,"iter_pk","","Creates a new [PkIter] iterator that will iterate over …",51,[[],["pkiter",3]]],[11,"iter_pkh","","Creates a new [PkhIter] iterator that will iterate over …",51,[[],["pkhiter",3]]],[11,"iter_pk_pkh","","Creates a new [PkPkhIter] iterator that will iterate over …",51,[[],["pkpkhiter",3]]],[11,"branches","","Enumerates all child nodes of the current AST node (<code>self</code>) …",51,[[],[["miniscript",3],["global",3],["vec",3]]]],[11,"get_nth_child","","Returns child node with given index, if any",51,[[["usize",15]],[["option",4],["miniscript",3]]]],[11,"get_leaf_pk","","Returns <code>Vec</code> with cloned version of all public keys from …",51,[[],[["global",3],["vec",3]]]],[11,"get_leaf_pkh","","Returns <code>Vec</code> with hashes of all public keys from the …",51,[[],[["global",3],["vec",3]]]],[11,"get_leaf_pk_pkh","","Returns <code>Vec</code> of [PkPkh] entries, representing either …",51,[[],[["global",3],["pkpkh",4],["vec",3]]]],[11,"get_nth_pk","","Returns <code>Option::Some</code> with cloned n\'th public key from the …",51,[[["usize",15]],["option",4]]],[11,"get_nth_pkh","","Returns <code>Option::Some</code> with hash of n\'th public key from …",51,[[["usize",15]],["option",4]]],[11,"get_nth_pk_pkh","","Returns <code>Option::Some</code> with hash of n\'th public key or hash …",51,[[["usize",15]],[["pkpkh",4],["option",4]]]],[11,"from_ast","","Add type information(Type and Extdata) to Miniscript …",51,[[["terminal",4]],[["result",4],["miniscript",3],["error",4]]]],[11,"into_inner","","Extracts the <code>AstElem</code> representing the root of the …",51,[[],["terminal",4]]],[11,"as_inner","","Get a reference to the inner <code>AstElem</code> representing the …",51,[[],["terminal",4]]],[11,"parse_insane","","Attempt to parse an insane(scripts don\'t clear sanity …",51,[[["script",3]],[["result",4],["miniscript",3],["error",4]]]],[11,"parse","","Attempt to parse a Script into Miniscript representation. …",51,[[["script",3]],[["result",4],["miniscript",3],["error",4]]]],[11,"encode","","Encode as a Bitcoin script",51,[[],["script",3]]],[11,"script_size","","Size, in bytes of the script-pubkey. If this Miniscript …",51,[[],["usize",15]]],[11,"max_satisfaction_witness_elements","","Maximum number of witness elements used to satisfy the …",51,[[],[["result",4],["usize",15],["error",4]]]],[11,"max_satisfaction_size","","Maximum size, in bytes, of a satisfying witness. For …",51,[[],[["result",4],["usize",15],["error",4]]]],[11,"from_str_insane","","Attempt to parse an insane(scripts don\'t clear sanity …",51,[[["str",15]],[["result",4],["miniscript",3],["error",4]]]],[11,"satisfy","","Attempt to produce non-malleable satisfying witness for …",51,[[],[["vec",3],["error",4],["result",4]]]],[11,"satisfy_malleable","","Attempt to produce a malleable satisfying witness for the …",51,[[],[["vec",3],["error",4],["result",4]]]],[11,"lift_check","","Lifting corresponds conversion of miniscript into Policy […",51,[[],[["lifterror",4],["result",4]]]],[11,"check_witness","bdk::keys","Check whether the given satisfaction is valid under the …",52,[[],[["scriptcontexterror",4],["result",4]]]],[11,"check_global_consensus_validity","","Depending on script Context, some of the Terminals might …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_global_policy_validity","","Depending on script Context, some of the script resource …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_consensus_validity","","Consensus rules at the Miniscript satisfaction time. It …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_policy_validity","","Policy rules at the Miniscript satisfaction time. It is …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_global_validity","","Check the consensus + policy(if not disabled) rules that …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"check_local_validity","","Check the consensus + policy(if not disabled) rules …",52,[[["miniscript",3]],[["scriptcontexterror",4],["result",4]]]],[11,"top_level_type_check","","Check whether the top-level is type B",52,[[["miniscript",3]],[["result",4],["error",4]]]],[11,"other_top_level_checks","","Other top level checks that are context specific",52,[[["miniscript",3]],[["result",4],["error",4]]]],[11,"top_level_checks","","Check top level consensus rules.",52,[[["miniscript",3]],[["result",4],["error",4]]]],[11,"new","bdk::descriptor","Construct a new derived key",103,[[["descriptorpublickey",4],["secp256k1",3]],["deriveddescriptorkey",3]]],[11,"from_language_code","bdk::keys::bip39","Construct a word list from its language code. Returns None…",55,[[["str",15]],[["option",4],["language",4]]]],[11,"wordlist","","Get the word list for this language",55,[[],["wordlist",3]]],[11,"wordmap","","Get a [<code>WordMap</code>][WordMap] that allows word -> index …",55,[[],["wordmap",3]]],[11,"new","","Generates a new <code>Mnemonic</code>",105,[[["mnemonictype",4],["language",4]],["mnemonic",3]]],[11,"from_entropy","","Create a <code>Mnemonic</code> from pre-generated entropy",105,[[["language",4]],[["result",4],["mnemonic",3],["error",3]]]],[11,"from_phrase","","Create a <code>Mnemonic</code> from an existing mnemonic phrase",105,[[["language",4],["str",15]],[["result",4],["mnemonic",3],["error",3]]]],[11,"validate","","Validate a mnemonic phrase",105,[[["language",4],["str",15]],[["result",4],["error",3]]]],[11,"phrase","","Get the mnemonic phrase as a string reference.",105,[[],["str",15]]],[11,"into_phrase","","Consume the <code>Mnemonic</code> and return the phrase as a <code>String</code>.",105,[[],["string",3]]],[11,"entropy","","Get the original entropy value of the mnemonic phrase as …",105,[[]]],[11,"language","","Get the <code>Language</code>",105,[[],["language",4]]],[11,"for_word_count","","Get a <code>MnemonicType</code> for a mnemonic phrase with a specific …",56,[[["usize",15]],[["result",4],["mnemonictype",4],["error",3]]]],[11,"for_key_size","","Get a <code>MnemonicType</code> for a mnemonic phrase representing the …",56,[[["usize",15]],[["result",4],["mnemonictype",4],["error",3]]]],[11,"for_phrase","","Get a <code>MnemonicType</code> for an existing mnemonic phrase",56,[[["str",15]],[["result",4],["mnemonictype",4],["error",3]]]],[11,"total_bits","","Return the number of entropy+checksum bits",56,[[],["usize",15]]],[11,"entropy_bits","","Return the number of entropy bits",56,[[],["usize",15]]],[11,"checksum_bits","","Return the number of checksum bits",56,[[],["u8",15]]],[11,"word_count","","Return the number of words",56,[[],["usize",15]]],[11,"new","","Generates the seed from the <code>Mnemonic</code> and the password.",106,[[["str",15],["mnemonic",3]],["seed",3]]],[11,"as_bytes","","Get the seed value as a byte slice",106,[[]]],[11,"as_public","bdk::keys","Return the public version of this key, by applying either …",58,[[["secp256k1",3]],[["result",4],["descriptorkeyparseerror",3],["descriptorpublickey",4]]]],[11,"new","","Create a new instance of <code>SortedMultiVec</code> given a list of …",61,[[["usize",15],["vec",3],["global",3]],[["error",4],["result",4],["sortedmultivec",3]]]],[11,"from_tree","","Parse an expression tree into a SortedMultiVec",61,[[["tree",3]],[["error",4],["result",4],["sortedmultivec",3]]]],[11,"translate_pk","","This will panic if translatefpk returns an uncompressed …",61,[[],[["sortedmultivec",3],["result",4]]]],[11,"sanity_check","","utility function to sanity a sorted multi vec",61,[[],[["result",4],["error",4]]]],[11,"sorted_node","","Create Terminal::Multi containing sorted pubkeys",61,[[],["terminal",4]]],[11,"encode","","Encode as a Bitcoin script",61,[[],["script",3]]],[11,"satisfy","","Attempt to produce a satisfying witness for the witness …",61,[[],[["vec",3],["error",4],["result",4]]]],[11,"script_size","","Size, in bytes of the script-pubkey. If this Miniscript …",61,[[],["usize",15]]],[11,"max_satisfaction_witness_elements","","Maximum number of witness elements used to satisfy the …",61,[[],["usize",15]]],[11,"max_satisfaction_size","","Maximum size, in bytes, of a satisfying witness. In …",61,[[],["usize",15]]],[11,"as_byte","bdk","Return [<code>KeychainKind</code>] as a byte",93,[[],["u8",15]]],[11,"from_btc_per_kvb","","Create a new instance of [<code>FeeRate</code>] given a float fee rate …",107,[[["f32",15]]]],[11,"from_sat_per_vb","","Create a new instance of [<code>FeeRate</code>] given a float fee rate …",107,[[["f32",15]]]],[11,"default_min_relay_fee","","Create a new [<code>FeeRate</code>] with the default min relay fee …",107,[[]]],[11,"as_sat_vb","","Return the value as satoshi/vbyte",107,[[],["f32",15]]]],"p":[[4,"AnyBlockchain"],[4,"AnyBlockchainConfig"],[3,"ElectrumBlockchainConfig"],[3,"EsploraBlockchain"],[3,"EsploraBlockchainConfig"],[4,"EsploraError"],[3,"CompactFiltersBlockchain"],[3,"BitcoinPeerConfig"],[3,"CompactFiltersBlockchainConfig"],[4,"CompactFiltersError"],[4,"Capability"],[8,"Blockchain"],[8,"ConfigurableBlockchain"],[8,"Progress"],[4,"AnyDatabase"],[4,"AnyBatch"],[3,"SledDbConfiguration"],[4,"AnyDatabaseConfig"],[3,"MemoryDatabase"],[8,"BatchOperations"],[8,"Database"],[8,"BatchDatabase"],[8,"ConfigurableDatabase"],[4,"Error"],[4,"SatisfiableItem"],[13,"SHA256Preimage"],[13,"HASH256Preimage"],[13,"RIPEMD160Preimage"],[13,"HASH160Preimage"],[13,"AbsoluteTimelock"],[13,"RelativeTimelock"],[13,"Multisig"],[13,"Thresh"],[4,"Satisfaction"],[13,"Partial"],[13,"PartialComplete"],[13,"Complete"],[3,"Policy"],[3,"Condition"],[4,"PolicyError"],[8,"DescriptorTemplate"],[3,"P2PKH"],[3,"P2WPKH_P2SH"],[3,"P2WPKH"],[3,"BIP44"],[3,"BIP44Public"],[3,"BIP49"],[3,"BIP49Public"],[3,"BIP84"],[3,"BIP84Public"],[4,"Descriptor"],[3,"Miniscript"],[8,"ScriptContext"],[8,"IntoWalletDescriptor"],[8,"ExtractPolicy"],[4,"Language"],[4,"MnemonicType"],[4,"DescriptorPublicKey"],[4,"DescriptorSecretKey"],[3,"DescriptorSinglePriv"],[3,"DescriptorSinglePub"],[3,"SortedMultiVec"],[4,"DescriptorKey"],[4,"ScriptContextEnum"],[8,"ExtScriptContext"],[8,"IntoDescriptorKey"],[4,"ExtendedKey"],[8,"DerivableKey"],[3,"GeneratedKey"],[8,"GeneratableKey"],[8,"GeneratableDefaultOptions"],[3,"PrivateKeyGenerateOptions"],[4,"KeyError"],[4,"AddressValidatorError"],[8,"AddressValidator"],[3,"CoinSelectionResult"],[8,"CoinSelectionAlgorithm"],[3,"BranchAndBoundCoinSelection"],[3,"WalletExport"],[4,"SignerId"],[4,"SignerError"],[8,"Signer"],[3,"SignerOrdering"],[3,"SignersContainer"],[3,"TxBuilder"],[4,"TxOrdering"],[4,"ChangeSpendPolicy"],[8,"IsDust"],[3,"Wallet"],[4,"Error"],[13,"InsufficientFunds"],[13,"FeeRateTooLow"],[13,"FeeTooLow"],[4,"KeychainKind"],[3,"UTXO"],[3,"TransactionDetails"],[3,"ElectrumBlockchain"],[3,"Mempool"],[3,"Peer"],[3,"NoopProgress"],[3,"LogProgress"],[4,"Legacy"],[4,"Segwitv0"],[3,"DerivedDescriptorKey"],[3,"PKOrF"],[3,"Mnemonic"],[3,"Seed"],[3,"FeeRate"],[3,"LargestFirstCoinSelection"],[3,"CreateTx"],[3,"BumpFee"],[6,"ExtendedDescriptor"],[6,"DescriptorTemplateOut"],[6,"MnemonicWithPassphrase"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);