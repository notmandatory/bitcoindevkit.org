var searchIndex = JSON.parse('{\
"bdk":{"doc":"A modern, lightweight, descriptor-based wallet library …","t":[0,0,4,13,13,13,4,13,13,13,0,3,3,12,12,12,12,0,3,11,3,12,12,4,13,13,13,13,13,13,13,0,3,3,3,11,3,12,12,12,3,12,12,12,12,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,8,10,10,11,10,10,10,10,8,16,10,6,8,10,5,3,5,3,5,0,0,4,13,13,4,13,13,3,12,12,4,13,13,0,3,11,8,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,8,16,10,10,8,16,10,0,0,5,0,4,13,13,13,13,13,13,13,13,13,13,13,13,0,3,4,13,13,13,12,13,12,13,12,13,12,13,12,13,12,13,12,12,13,12,12,11,11,6,6,4,13,12,12,12,12,12,13,12,12,12,12,12,13,12,13,11,3,12,12,12,12,3,12,12,11,4,13,13,13,13,13,13,11,11,11,0,6,8,10,3,12,3,12,3,12,3,12,12,3,12,12,12,3,12,12,3,12,12,12,3,12,12,3,12,12,12,6,4,13,13,13,13,13,4,3,12,12,12,8,10,11,10,11,11,11,11,11,11,11,11,11,4,3,6,6,6,8,10,8,10,0,0,4,13,13,13,13,13,13,13,13,3,4,13,13,13,13,13,3,6,4,13,13,4,13,13,3,12,12,3,12,12,6,3,12,12,8,10,11,10,11,11,11,11,11,11,11,11,11,6,5,5,5,5,4,11,11,11,4,13,13,11,11,8,10,11,11,8,10,4,13,13,11,11,11,8,10,11,3,11,8,16,16,16,10,11,8,11,11,3,12,4,13,13,13,13,13,13,0,0,4,13,13,13,13,13,8,10,0,6,3,12,12,11,11,8,10,3,3,11,0,3,12,12,11,11,11,0,4,13,13,13,4,13,13,13,13,13,13,13,13,13,8,10,10,10,11,3,12,3,11,11,11,11,11,11,11,0,5,0,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,11,4,13,13,13,8,10,3,11,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,13,13,13,12,12,13,13,13,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,3,3,12,12,12,3,12,12,4,13,13,12,12,3,12,12,12,12,12,12,12,5,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["blockchain","any","AnyBlockchain","Electrum","Esplora","CompactFilters","AnyBlockchainConfig","Electrum","Esplora","CompactFilters","electrum","ElectrumBlockchain","ElectrumBlockchainConfig","url","socks5","retry","timeout","esplora","EsploraBlockchain","new","EsploraBlockchainConfig","base_url","concurrency","EsploraError","Reqwest","Parsing","BitcoinEncoding","Hex","TransactionNotFound","HeaderHeightNotFound","HeaderHashNotFound","compact_filters","Mempool","Peer","CompactFiltersBlockchain","new","BitcoinPeerConfig","address","socks5","socks5_credentials","CompactFiltersBlockchainConfig","peers","network","storage_dir","skip_blocks","CompactFiltersError","InvalidResponse","InvalidHeaders","InvalidFilterHeader","InvalidFilter","MissingBlock","DataCorruption","NotConnected","Timeout","PeerBloomDisabled","NoPeers","DB","IO","BIP158","Time","Global","Capability","FullHistory","GetAnyTx","AccurateFees","Blockchain","get_capabilities","setup","sync","get_tx","broadcast","get_height","estimate_fee","ConfigurableBlockchain","Config","from_config","ProgressData","Progress","update","progress","NoopProgress","noop_progress","LogProgress","log_progress","database","any","AnyDatabase","Memory","Sled","AnyBatch","Memory","Sled","SledDbConfiguration","path","tree_name","AnyDatabaseConfig","Memory","Sled","memory","MemoryDatabase","new","BatchOperations","set_script_pubkey","set_utxo","set_raw_tx","set_tx","set_last_index","del_script_pubkey_from_path","del_path_from_script_pubkey","del_utxo","del_raw_tx","del_tx","del_last_index","Database","check_descriptor_checksum","iter_script_pubkeys","iter_utxos","iter_raw_txs","iter_txs","get_script_pubkey_from_path","get_path_from_script_pubkey","get_utxo","get_raw_tx","get_tx","get_last_index","increment_last_index","BatchDatabase","Batch","begin_batch","commit_batch","ConfigurableDatabase","Config","from_config","descriptor","checksum","get_checksum","error","Error","InvalidHDKeyPath","InvalidDescriptorChecksum","HardenedDerivationXpub","DuplicatedKeys","Key","Policy","InvalidDescriptorCharacter","BIP32","Base58","PK","Miniscript","Hex","policy","PKOrF","SatisfiableItem","Signature","SignatureKey","SHA256Preimage","hash","HASH256Preimage","hash","RIPEMD160Preimage","hash","HASH160Preimage","hash","AbsoluteTimelock","value","RelativeTimelock","value","Multisig","keys","threshold","Thresh","items","threshold","is_leaf","id","ConditionMap","FoldedConditionMap","Satisfaction","Partial","n","m","items","sorted","conditions","PartialComplete","n","m","items","sorted","conditions","Complete","condition","None","is_leaf","Policy","id","item","satisfaction","contribution","Condition","csv","timelock","is_null","PolicyError","NotEnoughItemsSelected","IndexOutOfRange","AddOnLeaf","AddOnPartialComplete","MixedTimelockUnits","IncompatibleConditions","requires_path","get_condition","fill_satisfactions","template","DescriptorTemplateOut","DescriptorTemplate","build","P2PKH","0","P2WPKH_P2SH","0","P2WPKH","0","BIP44","0","1","BIP44Public","0","1","2","BIP49","0","1","BIP49Public","0","1","2","BIP84","0","1","BIP84Public","0","1","2","KeyMap","Descriptor","Bare","Pkh","Wpkh","Sh","Wsh","Legacy","Miniscript","node","ty","ext","ScriptContext","check_terminal_non_malleable","check_witness","max_satisfaction_size","check_global_consensus_validity","check_global_policy_validity","check_local_consensus_validity","check_local_policy_validity","check_global_validity","check_local_validity","top_level_type_check","other_top_level_checks","top_level_checks","Segwitv0","DerivedDescriptorKey","ExtendedDescriptor","DerivedDescriptor","HDKeyPaths","IntoWalletDescriptor","into_wallet_descriptor","ExtractPolicy","extract_policy","keys","bip39","Language","English","ChineseSimplified","ChineseTraditional","French","Italian","Japanese","Korean","Spanish","Mnemonic","MnemonicType","Words12","Words15","Words18","Words21","Words24","Seed","MnemonicWithPassphrase","DescriptorPublicKey","SinglePub","XPub","DescriptorSecretKey","SinglePriv","XPrv","DescriptorSinglePriv","origin","key","DescriptorSinglePub","origin","key","KeyMap","SortedMultiVec","k","pks","ScriptContext","check_terminal_non_malleable","check_witness","max_satisfaction_size","check_global_consensus_validity","check_global_policy_validity","check_local_consensus_validity","check_local_policy_validity","check_global_validity","check_local_validity","top_level_type_check","other_top_level_checks","top_level_checks","ValidNetworks","any_network","mainnet_network","test_networks","merge_networks","DescriptorKey","from_public","from_secret","override_valid_networks","ScriptContextEnum","Legacy","Segwitv0","is_legacy","is_segwit_v0","ExtScriptContext","as_enum","is_legacy","is_segwit_v0","IntoDescriptorKey","into_descriptor_key","ExtendedKey","Private","Public","has_secret","into_xprv","into_xpub","DerivableKey","into_extended_key","into_descriptor_key","GeneratedKey","into_key","GeneratableKey","Entropy","Options","Error","generate_with_entropy","generate","GeneratableDefaultOptions","generate_with_entropy_default","generate_default","PrivateKeyGenerateOptions","compressed","KeyError","InvalidScriptContext","InvalidNetwork","InvalidChecksum","Message","BIP32","Miniscript","wallet","address_validator","AddressValidatorError","UserRejected","ConnectionError","TimeoutError","InvalidScript","Message","AddressValidator","validate","coin_selection","DefaultCoinSelectionAlgorithm","CoinSelectionResult","selected","fee_amount","selected_amount","local_selected_amount","CoinSelectionAlgorithm","coin_select","LargestFirstCoinSelection","BranchAndBoundCoinSelection","new","export","WalletExport","blockheight","label","export_wallet","descriptor","change_descriptor","signer","SignerId","PkHash","Fingerprint","Dummy","SignerError","MissingKey","InvalidKey","UserCanceled","InputIndexOutOfRange","MissingNonWitnessUtxo","InvalidNonWitnessUtxo","MissingWitnessUtxo","MissingWitnessScript","MissingHDKeypath","Signer","sign","sign_whole_tx","id","descriptor_secret_key","SignerOrdering","0","SignersContainer","as_key_map","new","add_external","remove","ids","signers","find","time","get_timestamp","tx_builder","TxBuilderContext","CreateTx","BumpFee","TxBuilder","fee_rate","fee_absolute","policy_path","add_utxos","add_utxo","add_foreign_utxo","manually_selected_only","unspendable","add_unspendable","sighash","ordering","nlocktime","version","do_not_spend_change","only_spend_change","change_policy","force_non_witness_utxo","include_output_redeem_witness_script","add_global_xpubs","drain_wallet","coin_selection","finish","set_recipients","add_recipient","set_single_recipient","enable_rbf","enable_rbf_with_sequence","maintain_single_recipient","TxOrdering","Shuffle","Untouched","BIP69Lexicographic","sort_tx","ChangeSpendPolicy","ChangeAllowed","OnlyChange","ChangeForbidden","IsDust","is_dust","Wallet","new_offline","AddressIndex","New","LastUnused","Peek","Reset","get_address","is_mine","list_unspent","get_utxo","list_transactions","get_balance","add_signer","add_address_validator","build_tx","build_fee_bump","sign","policies","public_descriptor","finalize_psbt","secp_ctx","get_descriptor_for_keychain","new","sync","client","network","broadcast","Error","InvalidU32Bytes","Generic","ScriptDoesntHaveAddressForm","SingleRecipientMultipleOutputs","SingleRecipientNoInputs","NoRecipients","NoUtxosSelected","OutputBelowDustLimit","InsufficientFunds","needed","available","BnBTotalTriesExceeded","BnBNoExactMatch","UnknownUTXO","TransactionNotFound","TransactionConfirmed","IrreplaceableTransaction","FeeRateTooLow","required","FeeTooLow","required","MissingKeyOrigin","Key","ChecksumMismatch","SpendingPolicyRequired","InvalidPolicyPathError","Signer","InvalidProgressValue","ProgressUpdateError","InvalidOutpoint","Descriptor","AddressValidator","Encode","Miniscript","BIP32","Secp256k1","JSON","Hex","PSBT","Electrum","Esplora","CompactFilters","Sled","KeychainKind","External","Internal","FeeRate","LocalUtxo","outpoint","txout","keychain","WeightedUtxo","satisfaction_weight","utxo","Utxo","Local","Foreign","outpoint","psbt_input","TransactionDetails","transaction","txid","timestamp","received","sent","fees","height","version","descriptor","fragment","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","as_enum","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","as_enum","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","into_wallet_descriptor","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","into_wallet_descriptor","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","into_wallet_descriptor","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","into_wallet_descriptor","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","into_wallet_descriptor","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","into_wallet_descriptor","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","into_wallet_descriptor","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","into_wallet_descriptor","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","into_wallet_descriptor","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","to_hex","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","to_hex","write_base32","base32_len","check_base32","vzip","init","deref","deref_mut","drop","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","write_base32","base32_len","check_base32","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equivalent","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","init","deref","deref_mut","drop","for_each_key","for_each_key","for_each_key","translate_pk","translate_pk","from_tree","from_tree","hash","hash","hash","hash","hash","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","check_terminal_non_malleable","check_witness","check_global_consensus_validity","check_local_consensus_validity","check_local_policy_validity","max_satisfaction_size","check_terminal_non_malleable","check_witness","check_global_consensus_validity","check_local_consensus_validity","check_global_policy_validity","check_local_policy_validity","max_satisfaction_size","fmt","fmt","fmt","fmt","fmt","clone","clone","clone","clone","clone","clone","clone","from_str","from_str","from_str","from_str","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","lift","lift","lift","sanity_check","address","script_pubkey","unsigned_script_sig","explicit_script","get_satisfaction","max_satisfaction_weight","script_code","cmp","cmp","cmp","cmp","cmp","cmp","cmp","is_uncompressed","to_pubkeyhash","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","drop","drop","clone","clone","clone","clone","zeroize","zeroize","zeroize","fmt","fmt","fmt","fmt","as_ref","as_ref","fmt","fmt","default","default","eq","fmt","fmt","fmt","fmt","from_config","from_config","from_config","from_config","update","update","set_script_pubkey","set_utxo","set_raw_tx","set_tx","set_last_index","del_script_pubkey_from_path","del_path_from_script_pubkey","del_utxo","del_raw_tx","del_tx","del_last_index","set_script_pubkey","set_utxo","set_raw_tx","set_tx","set_last_index","del_script_pubkey_from_path","del_path_from_script_pubkey","del_utxo","del_raw_tx","del_tx","del_last_index","set_script_pubkey","set_utxo","set_raw_tx","set_tx","set_last_index","del_script_pubkey_from_path","del_path_from_script_pubkey","del_utxo","del_raw_tx","del_tx","del_last_index","check_descriptor_checksum","iter_script_pubkeys","iter_utxos","iter_raw_txs","iter_txs","get_script_pubkey_from_path","get_path_from_script_pubkey","get_utxo","get_raw_tx","get_tx","get_last_index","increment_last_index","check_descriptor_checksum","iter_script_pubkeys","iter_utxos","iter_raw_txs","iter_txs","get_script_pubkey_from_path","get_path_from_script_pubkey","get_utxo","get_raw_tx","get_tx","get_last_index","increment_last_index","begin_batch","commit_batch","begin_batch","commit_batch","from_config","from_config","build","build","build","build","build","build","build","build","build","into_wallet_descriptor","into_wallet_descriptor","extract_policy","extract_policy","into_descriptor_key","into_descriptor_key","into_descriptor_key","into_descriptor_key","into_extended_key","into_descriptor_key","into_extended_key","into_descriptor_key","into_extended_key","into_descriptor_key","into_extended_key","into_extended_key","into_descriptor_key","generate_with_entropy","coin_select","coin_select","get_capabilities","setup","sync","get_tx","broadcast","get_height","estimate_fee","get_capabilities","setup","get_tx","broadcast","get_height","estimate_fee","get_capabilities","setup","get_tx","broadcast","get_height","estimate_fee","get_capabilities","setup","get_tx","broadcast","get_height","estimate_fee","as_ref","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","cmp","cmp","cmp","cmp","cmp","cmp","eq","eq","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","eq","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_string","deref","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from_str","hash","hash","hash","hash","hash","hash","hash","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","to_pubkeyhash","is_uncompressed","serialized_len","to_public_key","hash_to_hash160","new","add_tx","get_tx","has_tx","iter_txs","connect","connect_proxy","get_version","get_network","get_mempool","is_connected","send","recv","new_pk","new_pkh","new_wpkh","new_sh_wpkh","new_sh","new_wsh","new_sh_wsh","new_bare","new_sh_sortedmulti","new_sh_wsh_sortedmulti","new_wsh_sortedmulti","desc_type","is_deriveable","derive","parse_descriptor","to_string_with_secret","master_fingerprint","full_derivation_path","is_deriveable","derive","derive_public_key","requires_sig","is_non_malleable","within_resource_limits","has_mixed_timelocks","has_repeated_keys","sanity_check","iter","iter_pk","iter_pkh","iter_pk_pkh","branches","get_nth_child","get_leaf_pk","get_leaf_pkh","get_leaf_pk_pkh","get_nth_pk","get_nth_pkh","get_nth_pk_pkh","from_ast","into_inner","as_inner","parse_insane","parse","encode","script_size","max_satisfaction_witness_elements","max_satisfaction_size","from_str_insane","satisfy","satisfy_malleable","lift_check","check_witness","check_global_consensus_validity","check_global_policy_validity","check_local_consensus_validity","check_local_policy_validity","check_global_validity","check_local_validity","top_level_type_check","other_top_level_checks","top_level_checks","new","from_language_code","wordlist","wordmap","new","from_entropy","from_phrase","validate","phrase","into_phrase","entropy","language","for_word_count","for_key_size","for_phrase","total_bits","entropy_bits","checksum_bits","word_count","new","as_bytes","as_public","new","from_tree","translate_pk","sanity_check","sorted_node","encode","satisfy","script_size","max_satisfaction_witness_elements","max_satisfaction_size","as_byte","from_btc_per_kvb","from_sat_per_vb","default_min_relay_fee","as_sat_vb","outpoint","txout"],"q":["bdk","bdk::blockchain","bdk::blockchain::any","","","","","","","","bdk::blockchain","bdk::blockchain::electrum","","","","","","bdk::blockchain","bdk::blockchain::esplora","","","","","","","","","","","","","bdk::blockchain","bdk::blockchain::compact_filters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::blockchain","","","","","","","","","","","","","","","","","","","","","","","bdk","bdk::database","bdk::database::any","","","","","","","","","","","","bdk::database","bdk::database::memory","","bdk::database","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk","bdk::descriptor","bdk::descriptor::checksum","bdk::descriptor","bdk::descriptor::error","","","","","","","","","","","","","bdk::descriptor","bdk::descriptor::policy","","","","","bdk::descriptor::policy::SatisfiableItem","bdk::descriptor::policy","bdk::descriptor::policy::SatisfiableItem","bdk::descriptor::policy","bdk::descriptor::policy::SatisfiableItem","bdk::descriptor::policy","bdk::descriptor::policy::SatisfiableItem","bdk::descriptor::policy","bdk::descriptor::policy::SatisfiableItem","bdk::descriptor::policy","bdk::descriptor::policy::SatisfiableItem","bdk::descriptor::policy","bdk::descriptor::policy::SatisfiableItem","","bdk::descriptor::policy","bdk::descriptor::policy::SatisfiableItem","","bdk::descriptor::policy","","","","","","bdk::descriptor::policy::Satisfaction","","","","","bdk::descriptor::policy","bdk::descriptor::policy::Satisfaction","","","","","bdk::descriptor::policy","bdk::descriptor::policy::Satisfaction","bdk::descriptor::policy","","","","","","","","","","","","","","","","","","","","","bdk::descriptor","bdk::descriptor::template","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::descriptor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk","bdk::keys","bdk::keys::bip39","","","","","","","","","","","","","","","","","","bdk::keys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk","bdk::wallet","bdk::wallet::address_validator","","","","","","","","bdk::wallet","bdk::wallet::coin_selection","","","","","","","","","","","bdk::wallet","bdk::wallet::export","","","","","","bdk::wallet","bdk::wallet::signer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::wallet","bdk::wallet::time","bdk::wallet","bdk::wallet::tx_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::wallet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk","","","","","","","","","","bdk::Error","","bdk","","","","","","","bdk::Error","bdk","bdk::Error","bdk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::Utxo","","bdk","","","","","","","","","","","","","","","","","","","","","","","","bdk::blockchain::any","","","","","","","","","","","","","","","","","","","","","","","","bdk::blockchain::electrum","","","","","","","","","","","","","","","","","","","","","","","","bdk::blockchain::esplora","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::blockchain::compact_filters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::blockchain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::database::any","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::database::memory","","","","","","","","","","","","bdk::descriptor","","","","","","","","","","","","","","","","bdk::keys","","","","","","","","","","","","","","","","bdk::descriptor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::descriptor::error","","","","","","","","","","","","","bdk::descriptor::policy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::descriptor::template","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::keys::bip39","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::keys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::wallet::address_validator","","","","","","","","","","","","","","","","bdk::wallet::coin_selection","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::wallet::export","","","","","","","","","","","","bdk::wallet::signer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::wallet::tx_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::wallet","","","","","","","","","","","","","","","","","","","","","","","","bdk::keys","bdk::descriptor","","","","","","","","bdk::keys","","bdk::descriptor","","","bdk::keys","","","","bdk::descriptor","","bdk::keys","","bdk::descriptor","","","","","","","","","","","","","","","bdk::keys","","bdk::descriptor","bdk::keys","","","bdk::descriptor","","bdk::keys","bdk::descriptor","","bdk::keys","bdk::descriptor","","bdk::keys","bdk::descriptor","","bdk::keys","","","bdk::descriptor","bdk::keys","bdk::descriptor","bdk::keys","bdk::descriptor","","bdk::keys","bdk::descriptor","","","","","","","","","","bdk::keys","","bdk::descriptor","bdk::keys","bdk::descriptor","bdk::keys","","bdk::descriptor","bdk::keys","","bdk::descriptor","","bdk::keys","bdk::descriptor","bdk::keys::bip39","","","","","","","","","","","","","","","","","","","","","","","","bdk::blockchain::any","bdk::blockchain::electrum","bdk::blockchain::esplora","bdk::blockchain::compact_filters","bdk::blockchain","","bdk::database::any","","","","","","","","","","","","","","","","","","","","","","bdk::database::memory","","","","","","","","","","","bdk::database::any","","","","","","","","","","","","bdk::database::memory","","","","","","","","","","","","bdk::database::any","","bdk::database::memory","","bdk::database::any","bdk::database::memory","bdk::descriptor::template","","","","","","","","","bdk","","bdk::descriptor","","bdk::keys","","","","bdk::keys::bip39","","bdk","","bdk::keys::bip39","","bdk::keys","","","bdk::keys::bip39","bdk::wallet::coin_selection","","bdk::blockchain::any","","","","","","","bdk::blockchain::electrum","","","","","","bdk::blockchain::esplora","","","","","","bdk::blockchain::compact_filters","","","","","","bdk","","","","","","","","","","","","","","","","","bdk::blockchain::any","","","","","","bdk::blockchain::electrum","bdk::blockchain::esplora","","","","bdk::blockchain::compact_filters","","","","","bdk::database::any","","","","","","bdk::descriptor::error","","","","","","","bdk::descriptor::policy","","bdk::keys","","","","bdk::wallet::signer","","","bdk::blockchain","","","bdk::descriptor","bdk::descriptor::policy","","","","","bdk::keys","","bdk","","","","","","bdk::wallet::address_validator","bdk::wallet::coin_selection","bdk::wallet::signer","","","","bdk::wallet::tx_builder","","","","","bdk::blockchain::compact_filters","bdk::database::memory","bdk::descriptor::policy","","bdk::keys","bdk","","bdk::wallet::coin_selection","","bdk::wallet::signer","","bdk::wallet::tx_builder","","","","bdk::descriptor","bdk::descriptor::policy","bdk::wallet::signer","","bdk::wallet::tx_builder","","bdk::blockchain","bdk::descriptor","bdk::descriptor::policy","","","","bdk::keys","bdk","","","","","","","","","","","bdk::wallet::address_validator","","bdk::wallet::signer","","","","","bdk::wallet::tx_builder","","bdk::descriptor","bdk::descriptor::policy","bdk","bdk::wallet::signer","","bdk::wallet::tx_builder","","bdk::wallet::export","bdk::descriptor","bdk::keys","bdk","bdk::blockchain::any","bdk::blockchain::electrum","bdk::blockchain::esplora","","","bdk::blockchain::compact_filters","","","","","","bdk::blockchain","bdk::database::any","","","bdk::database::memory","bdk::descriptor","bdk::descriptor::error","bdk::descriptor::policy","","","","","","bdk::keys","","","","bdk","","","","","","bdk::wallet::address_validator","bdk::wallet::coin_selection","","","bdk::wallet::export","bdk::wallet::signer","","","","bdk::wallet::tx_builder","","","","","bdk::wallet","","bdk","bdk::blockchain::esplora","bdk::blockchain::compact_filters","bdk::descriptor","bdk::descriptor::error","bdk::descriptor::policy","bdk::keys","bdk::wallet::address_validator","bdk::wallet::signer","bdk::wallet::export","bdk::blockchain","bdk::descriptor","bdk::descriptor::policy","bdk","bdk::wallet::signer","bdk::wallet::tx_builder","","bdk::blockchain::any","bdk::blockchain::electrum","bdk::blockchain::esplora","bdk::blockchain::compact_filters","","bdk::database::any","","bdk::descriptor::policy","","","","","bdk","","","bdk::wallet::export","bdk::blockchain::any","bdk::blockchain::electrum","bdk::blockchain::esplora","bdk::blockchain::compact_filters","","bdk::database::any","","bdk","","","bdk::wallet::export","bdk::descriptor","","","","","bdk::blockchain::compact_filters","","","","","","","","","","","","","bdk::descriptor","","","","","","","","","","","","","","","","bdk::keys","","","","","bdk::descriptor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bdk::keys","","","","","","","","","","bdk::descriptor","bdk::keys::bip39","","","","","","","","","","","","","","","","","","","","bdk::keys","","","","","","","","","","","bdk","","","","","",""],"d":["Blockchain backends","Runtime-checked blockchain types","Type that can contain any of the [<code>Blockchain</code>] types …","Electrum client","Esplora client","Compact filters client","Type that can contain any of the blockchain …","Electrum client","Esplora client","Compact filters client","Electrum","Wrapper over an Electrum Client that implements the …","Configuration for an [<code>ElectrumBlockchain</code>]","URL of the Electrum server (such as ElectrumX, Esplora, …","URL of the socks5 proxy server or a Tor service","Request retry count","Request timeout (seconds)","Esplora","Structure that implements the logic to sync with Esplora","Create a new instance of the client from a base URL","Configuration for an [<code>EsploraBlockchain</code>]","Base URL of the esplora service","Number of parallel requests sent to the esplora service …","Errors that can happen during a sync with […","Error with the HTTP call","Invalid number returned","Invalid Bitcoin data returned","Invalid Hex data returned","Transaction not found","Header height not found","Header hash not found","Compact Filters","Container for unconfirmed, but valid Bitcoin transactions","A Bitcoin peer","Structure implementing the required blockchain traits","Construct a new instance given a list of peers, a path to …","Data to connect to a Bitcoin P2P peer","Peer address such as 127.0.0.1:18333","Optional socks5 proxy","Optional socks5 proxy credentials","Configuration for a [<code>CompactFiltersBlockchain</code>]","List of peers to try to connect to for asking headers and …","Network used","Storage dir to save partially downloaded headers and full …","Optionally skip initial <code>skip_blocks</code> blocks (default: 0)","An error that can occur during sync with a […","A peer sent an invalid or unexpected response","The headers returned are invalid","The compact filter headers returned are invalid","The compact filter returned is invalid","The peer is missing a block in the valid chain","The data stored in the block filters storage are corrupted","A peer is not connected","A peer took too long to reply to one of our messages","The peer doesn’t advertise the <code>BLOOM</code> service flag","No peers have been specified","Internal database error","Internal I/O error","Invalid BIP158 filter","Internal system time error","Wrapper for [<code>crate::error::Error</code>]","Capabilities that can be supported by a [<code>Blockchain</code>] …","Can recover the full history of a wallet and not only the …","Can fetch any historical transaction given its txid","Can compute accurate fees for the transactions found …","Trait that defines the actions that must be supported by …","Return the set of [<code>Capability</code>] supported by this backend","Setup the backend and populate the internal database for …","Populate the internal database with transactions and UTXOs","Fetch a transaction from the blockchain given its txid","Broadcast a transaction","Return the current height","Estimate the fee rate required to confirm a transaction …","Trait for [<code>Blockchain</code>] types that can be created given a …","Type that contains the configuration","Create a new instance given a configuration","Data sent with a progress update over a [<code>channel</code>]","Trait for types that can receive and process progress …","Send a new progress update","Shortcut to create a [<code>channel</code>] (pair of [<code>Sender</code>] and […","Type that implements [<code>Progress</code>] and drops every update …","Create a new instance of [<code>NoopProgress</code>]","Type that implements [<code>Progress</code>] and logs at level <code>INFO</code> …","Create a nwe instance of [<code>LogProgress</code>]","Database types","Runtime-checked database types","Type that can contain any of the [<code>Database</code>] types defined …","In-memory ephemeral database","Simple key-value embedded database based on [<code>sled</code>]","Type that contains any of the [<code>BatchDatabase::Batch</code>] …","In-memory ephemeral database","Simple key-value embedded database based on [<code>sled</code>]","Configuration type for a [<code>sled::Tree</code>] database","Main directory of the db","Name of the database tree, a separated namespace for the …","Type that can contain any of the database configurations …","Memory database has no config","Simple key-value embedded database based on [<code>sled</code>]","In-memory ephemeral database","In-memory ephemeral database","Create a new empty database","Trait for operations that can be batched","Store a script_pubkey along with its keychain and child …","Store a [<code>LocalUtxo</code>]","Store a raw transaction","Store the metadata of a transaction","Store the last derivation index for a given keychain.","Delete a script_pubkey given the keychain and its child …","Delete the data related to a specific script_pubkey, …","Delete a [<code>LocalUtxo</code>] given its [<code>OutPoint</code>]","Delete a raw transaction given its [<code>Txid</code>]","Delete the metadata of a transaction and optionally the …","Delete the last derivation index for a keychain.","Trait for reading data from a database","Read and checks the descriptor checksum for a given …","Return the list of script_pubkeys","Return the list of [<code>LocalUtxo</code>]s","Return the list of raw transactions","Return the list of transactions metadata","Fetch a script_pubkey given the child number of a …","Fetch the keychain and child number of a given …","Fetch a [<code>LocalUtxo</code>] given its [<code>OutPoint</code>]","Fetch a raw transaction given its [<code>Txid</code>]","Fetch the transaction metadata and optionally also the …","Return the last defivation index for a keychain.","Increment the last derivation index for a keychain and …","Trait for a database that supports batch operations","Container for the operations","Create a new batch container","Consume and apply a batch of operations","Trait for [<code>Database</code>] types that can be created given a …","Type that contains the configuration","Create a new instance given a configuration","Descriptors","Descriptor checksum","Compute the checksum of a descriptor","Descriptor errors","Errors related to the parsing and usage of descriptors","Invalid HD Key path, such as having a wildcard but a …","The provided descriptor doesn’t match its checksum","The descriptor contains hardened derivation steps on …","The descriptor contains multiple keys with the same BIP32 …","Error thrown while working with <code>keys</code>","Error while extracting and manipulating policies","Invalid character found in the descriptor checksum","BIP32 error","Error during base58 decoding","Key-related error","Miniscript error","Hex decoding error","Descriptor policy","Raw public key or extended key fingerprint","An item that needs to be satisfied","Signature for a raw public key","Signature for an extended key fingerprint","SHA256 preimage hash","The digest value","Double SHA256 preimage hash","The digest value","RIPEMD160 preimage hash","The digest value","SHA256 then RIPEMD160 preimage hash","The digest value","Absolute timeclock timestamp","The timestamp value","Relative timelock locktime","The locktime value","Multi-signature public keys with threshold count","The raw public key or extended key fingerprint","The required threshold count","Threshold items with threshold count","The policy items","The required threshold count","Returns whether the [<code>SatisfiableItem</code>] is a leaf item","Returns a unique id for the [<code>SatisfiableItem</code>]","Type for a map of sets of [<code>Condition</code>] items keyed by each …","Type for a map of folded sets of [<code>Condition</code>] items keyed …","Represent if and how much a policy item is satisfied by …","Only a partial satisfaction of some kind of threshold …","Total number of items","Threshold","The items that can be satisfied by the descriptor or are …","Whether the items are sorted in lexicographic order (used …","Extra conditions that also need to be satisfied","Can reach the threshold of some kind of threshold policy","Total number of items","Threshold","The items that can be satisfied by the descriptor","Whether the items are sorted in lexicographic order (used …","Extra conditions that also need to be satisfied","Can satisfy the policy item","Extra conditions that also need to be satisfied","Cannot satisfy or contribute to the policy item","Returns whether the [<code>Satisfaction</code>] is a leaf item","Descriptor spending policy","Identifier for this policy node","Type of this policy node","How much a given PSBT already satisfies this policy node …","How the wallet’s descriptor can satisfy this policy node","An extra condition that must be satisfied but that is out …","Optional CheckSequenceVerify condition","Optional timelock condition","Returns <code>true</code> if there are no extra conditions to verify","Errors that can happen while extracting and manipulating …","Not enough items are selected to satisfy a […","Index out of range for an item to satisfy a […","Can not add to an item that is [<code>Satisfaction::None</code>] or […","Can not add to an item that is […","Can not merge CSV or timelock values unless both are less …","Incompatible conditions (not currently used)","Return whether or not a specific path in the policy tree …","Return the conditions that are set by the spending policy …","fill <code>self.satisfaction</code> with the signatures we already …","Descriptor templates","Type alias for the return type of [<code>DescriptorTemplate</code>], …","Trait for descriptor templates that can be built into a …","Build the complete descriptor","P2PKH template. Expands to a descriptor <code>pkh(key)</code>","","P2WPKH-P2SH template. Expands to a descriptor …","","P2WPKH template. Expands to a descriptor <code>wpkh(key)</code>","","BIP44 template. Expands to <code>pkh(key/44\'/0\'/0\'/{0,1}/*)</code>","","","BIP44 public template. Expands to <code>pkh(key/{0,1}/*)</code>","","","","BIP49 template. Expands to <code>sh(wpkh(key/49\'/0\'/0\'/{0,1}/*))</code>","","","BIP49 public template. Expands to <code>sh(wpkh(key/{0,1}/*))</code>","","","","BIP84 template. Expands to <code>wpkh(key/84\'/0\'/0\'/{0,1}/*)</code>","","","BIP84 public template. Expands to <code>wpkh(key/{0,1}/*)</code>","","","","Alias type for a map of public key to secret key","Script descriptor","A raw scriptpubkey (including pay-to-pubkey) under Legacy …","Pay-to-PubKey-Hash","Pay-to-Witness-PubKey-Hash","Pay-to-ScriptHash(includes nested wsh/wpkh/sorted multi)","Pay-to-Witness-ScriptHash with Segwitv0 context","Legacy ScriptContext To be used as P2SH scripts For …","Top-level script AST type","A node in the Abstract Syntax Tree(","The correctness and malleability type information for the …","Additional information helpful for extra analysis.","The ScriptContext for Miniscript. Additional type …","Depending on ScriptContext, fragments can be malleable. …","Check whether the given satisfaction is valid under the …","Depending on script context, the size of a satifaction …","Depending on script Context, some of the Terminals might …","Depending on script Context, some of the script resource …","Consensus rules at the Miniscript satisfaction time. It …","Policy rules at the Miniscript satisfaction time. It is …","Check the consensus + policy(if not disabled) rules that …","Check the consensus + policy(if not disabled) rules …","Check whether the top-level is type B","Other top level checks that are context specific","Check top level consensus rules.","Segwitv0 ScriptContext","Extended [<code>DescriptorPublicKey</code>] that has been derived","Alias for a [<code>Descriptor</code>] that can contain extended keys …","Alias for a [<code>Descriptor</code>] that contains extended <strong>derived</strong> …","Alias for the type of maps that represent derivation …","Trait for types which can be converted into an […","Convert to wallet descriptor","Trait implemented on [<code>Descriptor</code>]s to add a method to …","Extract the spending [<code>policy</code>]","Key formats","BIP-0039","The language determines which words will be used in a …","","","","","","","","","The primary type in this crate, most tasks require …","Determines the number of words that will be present in a …","","","","","","The secret value used to derive HD wallet addresses from …","Type for a BIP39 mnemonic with an optional passphrase","The MiniscriptKey corresponding to Descriptors. This can …","Single Public Key","Xpub","A Secret Key that can be either a single key or an Xprv","Single Secret Key","Xprv","A Single Descriptor Secret Key with optional origin …","Origin information","The key","A Single Descriptor Key with optional origin information","Origin information","The key","Alias type for a map of public key to secret key","Contents of a “sortedmulti” descriptor","signatures required","public keys inside sorted Multi","The ScriptContext for Miniscript. Additional type …","Depending on ScriptContext, fragments can be malleable. …","Check whether the given satisfaction is valid under the …","Depending on script context, the size of a satifaction …","Depending on script Context, some of the Terminals might …","Depending on script Context, some of the script resource …","Consensus rules at the Miniscript satisfaction time. It …","Policy rules at the Miniscript satisfaction time. It is …","Check the consensus + policy(if not disabled) rules that …","Check the consensus + policy(if not disabled) rules …","Check whether the top-level is type B","Other top level checks that are context specific","Check top level consensus rules.","Set of valid networks for a key","Create a set containing mainnet, testnet and regtest","Create a set only containing mainnet","Create a set containing testnet and regtest","Compute the intersection of two sets","Container for public or secret keys","Create an instance given a public key and a set of valid …","Create an instance given a secret key and a set of valid …","Override the computed set of valid networks","Enum representation of the known valid [<code>ScriptContext</code>]s","Legacy scripts","Segwitv0 scripts","Returns whether the script context is […","Returns whether the script context is […","Trait that adds extra useful methods to [<code>ScriptContext</code>]s","Returns the [<code>ScriptContext</code>] as a [<code>ScriptContextEnum</code>]","Returns whether the script context is <code>Legacy</code>","Returns whether the script context is <code>Segwitv0</code>","Trait for objects that can be turned into a public or …","Turn the key into a [<code>DescriptorKey</code>] within the requested […","Enum for extended keys that can be either <code>xprv</code> or <code>xpub</code>","A private extended key, aka an <code>xprv</code>","A public extended key, aka an <code>xpub</code>","Return whether or not the key contains the private data","Transform the [<code>ExtendedKey</code>] into an <code>ExtendedPrivKey</code> for …","Transform the [<code>ExtendedKey</code>] into an <code>ExtendedPubKey</code> for the…","Trait for keys that can be derived.","Consume <code>self</code> and turn it into an [<code>ExtendedKey</code>]","Consume <code>self</code> and turn it into a [<code>DescriptorKey</code>] by adding …","Output of a [<code>GeneratableKey</code>] key generation","Consumes <code>self</code> and returns the key","Trait for keys that can be generated","Type specifying the amount of entropy required e.g. …","Extra options required by the <code>generate_with_entropy</code>","Returned error in case of failure","Generate a key given the extra options and the entropy","Generate a key given the options with a random entropy","Trait that allows generating a key with the default …","Generate a key with the default options and a given …","Generate a key with the default options and a random …","Options for generating a [<code>PrivateKey</code>]","Whether the generated key should be “compressed” or …","Errors thrown while working with <code>keys</code>","The key cannot exist in the given script context","The key is not valid for the given network","The key has an invalid checksum","Custom error message","BIP32 error","Miniscript error","Wallet","Address validation callbacks","Errors that can be returned to fail the validation of an …","User rejected the address","Network connection error","Network request timeout error","Invalid script","A custom error message","Trait to build address validators","Validate or inspect an address","Coin selection","Default coin selection algorithm used by <code>TxBuilder</code> if not …","Result of a successful coin selection","List of outputs selected for use as inputs","Total fee amount in satoshi","The total value of the inputs selected.","The total value of the inputs selected from the local …","Trait for generalized coin selection algorithms","Perform the coin selection","Simple and dumb coin selection","Branch and bound coin selection","Create new instance with target size for change output","Wallet export","Structure that contains the export of a wallet","Earliest block to rescan when looking for the wallet’s …","Arbitrary label for the wallet","Export a wallet","Return the external descriptor","Return the internal descriptor, if present","Generalized signers","Identifier of a signer in the <code>SignersContainers</code>. Used as …","Bitcoin HASH160 (RIPEMD160 after SHA256) hash of an ECDSA …","The fingerprint of a BIP32 extended key","Dummy identifier","Signing error","The private key is missing for the required public key","The private key in use has the right fingerprint but …","The user canceled the operation","Input index is out of range","The <code>non_witness_utxo</code> field of the transaction is required …","The <code>non_witness_utxo</code> specified is invalid","The <code>witness_utxo</code> field of the transaction is required to …","The <code>witness_script</code> field of the transaction is requied to …","The fingerprint and derivation path are missing from the …","Trait for signers","Sign a PSBT","Return whether or not the signer signs the whole …","Return the [<code>SignerId</code>] for this signer","Return the secret key for the signer","Defines the order in which signers are called","","Container for multiple signers","Create a map of public keys to secret keys","Default constructor","Adds an external signer to the container for the …","Removes a signer from the container and returns it","Returns the list of identifiers of all the signers in the …","Returns the list of signers in the container, sorted by …","Finds the signer with lowest ordering for a given id in …","Cross-platform time","Return the current timestamp in seconds","Transaction builder","Context in which the [<code>TxBuilder</code>] is valid","Marker type to indicate the [<code>TxBuilder</code>] is being used to …","Marker type to indicate the [<code>TxBuilder</code>] is being used to …","A transaction builder","Set a custom fee rate","Set an absolute fee","Set the policy path to use while creating the transaction …","Add the list of outpoints to the internal list of UTXOs …","Add a utxo to the internal list of utxos that <strong>must</strong> be …","Add a foreign UTXO i.e. a UTXO not owned by this wallet.","Only spend utxos added by <code>add_utxo</code>.","Replace the internal list of unspendable utxos with a new …","Add a utxo to the internal list of unspendable utxos","Sign with a specific sig hash","Choose the ordering for inputs and outputs of the …","Use a specific nLockTime while creating the transaction","Build a transaction with a specific version","Do not spend change outputs","Only spend change outputs","Set a specific [<code>ChangeSpendPolicy</code>]. See […","Fill-in the <code>psbt::Input::non_witness_utxo</code> field even if …","Fill-in the <code>psbt::Output::redeem_script</code> and …","Fill-in the <code>PSBT_GLOBAL_XPUB</code> field with the extended keys …","Spend all the available inputs. This respects filters …","Choose the coin selection algorithm","Finish the building the transaction.","Replace the recipients already added with a new list","Add a recipient to the internal list","Set a single recipient that will get all the selected …","Enable signaling RBF","Enable signaling RBF with a specific nSequence value","Bump the fees of a transaction made with …","Ordering of the transaction’s inputs and outputs","Randomized (default)","Unchanged","BIP69 / Lexicographic","Sort transaction inputs and outputs by [<code>TxOrdering</code>] …","Policy regarding the use of change outputs when creating …","Use both change and non-change outputs (default)","Only use change outputs (see [<code>TxBuilder::only_spend_change</code>…","Only use non-change outputs (see […","Trait to check if a value is below the dust limit","Check whether or not a value is below dust limit","A Bitcoin wallet","Create a new “offline” wallet","The address index selection strategy to use to derived an …","Return a new address after incrementing the current …","Return the address for the current descriptor index if it …","Return the address for a specific descriptor index. Does …","Return the address for a specific descriptor index and …","Return a derived address using the external descriptor, …","Return whether or not a <code>script</code> is part of this wallet …","Return the list of unspent outputs of this wallet","Returns the <code>UTXO</code> owned by this wallet corresponding to …","Return the list of transactions made and received by the …","Return the balance, meaning the sum of this wallet’s …","Add an external signer","Add an address validator","Start building a transaction.","Bump the fee of a transaction previously created with …","Sign a transaction with all the wallet’s signers, in …","Return the spending policies for the wallet’s descriptor","Return the “public” version of the wallet’s …","Try to finalize a PSBT","Return the secp256k1 context used for all signing …","Returns the descriptor used to create adddresses for a …","Create a new “online” wallet","Sync the internal database with the blockchain","Return a reference to the internal blockchain client","Get the Bitcoin network the wallet is using.","Broadcast a transaction to the network","Errors that can be thrown by the <code>Wallet</code>","Wrong number of bytes found when trying to convert to u32","Generic error","This error is thrown when trying to convert Bare and …","Found multiple outputs when <code>single_recipient</code> option has …","<code>single_recipient</code> option is selected but neither …","Cannot build a tx without recipients","<code>manually_selected_only</code> option is selected but no utxo has …","Output created is under the dust limit, 546 satoshis","Wallet’s UTXO set is not enough to cover recipient’s …","Sats needed for some transaction","Sats available for spending","Branch and bound coin selection possible attempts with …","Branch and bound coin selection tries to avoid needing a …","Happens when trying to spend an UTXO that is not in the …","Thrown when a tx is not found in the internal database","Happens when trying to bump a transaction that is already …","Trying to replace a tx that has a sequence >= <code>0xFFFFFFFE</code>","When bumping a tx the fee rate requested is lower than …","Required fee rate (satoshi/vbyte)","When bumping a tx the absolute fee requested is lower …","Required fee absolute value (satoshi)","In order to use the <code>TxBuilder::add_global_xpubs</code> option …","Error while working with <code>keys</code>","Descriptor checksum mismatch","Spending policy is not compatible with this <code>KeychainKind</code>","Error while extracting and manipulating policies","Signing error","Progress value must be between <code>0.0</code> (included) and <code>100.0</code> …","Progress update error (maybe the channel has been closed)","Requested outpoint doesn’t exist in the tx (vout …","Error related to the parsing and usage of descriptors","Error that can be returned to fail the validation of an …","Encoding error","Miniscript error","BIP32 error","An ECDSA error","Error serializing or deserializing JSON data","Hex decoding error","Partially signed bitcoin transaction error","Electrum client error","Esplora client error","Compact filters client error)","Sled database error","Types of keychains","External","Internal, usually used for change outputs","Fee rate","An unspent output owned by a <code>Wallet</code>.","Reference to a transaction output","Transaction output","Type of keychain","A [<code>Utxo</code>] with its <code>satisfaction_weight</code>.","The weight of the witness data and <code>scriptSig</code> expressed in …","The UTXO","An unspent transaction output (UTXO).","A UTXO owned by the local wallet.","A UTXO owned by another wallet.","The location of the output.","The information about the input we require to add it to a …","A wallet transaction","Optional transaction","Transaction id","Timestamp","Received value (sats)","Sent value (sats)","Fee value (sats)","Confirmed in block height, <code>None</code> means unconfirmed","Get the version of BDK at runtime","Macro to write full descriptors with code","Macro to write descriptor fragments with code","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Outputs the hash in hexadecimal form","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Outputs the hash in hexadecimal formhis will panic if translatefpk returns an uncompressed …","Convert a descriptor using abstract keys to one using …","Parse an expression tree into a Miniscript. As a general …","Parse an expression tree into a descriptor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the descriptor is safe Checks whether all the …","Computes the Bitcoin address of the descriptor, if one …","Computes the scriptpubkey of the descriptor","Computes the scriptSig that will be in place for an …","Computes the “witness script” of the descriptor, i.e. …","Returns satisfying witness and scriptSig to spend an …","Computes an upper bound on the weight of a satisfying …","Get the <code>scriptCode</code> of a transaction outputreate a new empty mempool","Add a transaction to the mempool","Look-up a transaction in the mempool given an [<code>Inventory</code>] …","Return whether or not the mempool contains a transaction …","Return the list of transactions contained in the mempool","Connect to a peer over a plaintext TCP connection","Connect to a peer through a SOCKS5 proxy, optionally by …","Return the [<code>VersionMessage</code>] sent by the peer","Return the Bitcoin [<code>Network</code>] in use","Return the mempool used by this peer","Return whether or not the peer is still connected","Send a raw Bitcoin message to the peer","Waits for a specific incoming Bitcoin message, optionally …","Create a new pk descriptor","Create a new PkH descriptor","Create a new Wpkh descriptor Will return Err if …","Create a new sh wrapped wpkh from <code>Pk</code>. Errors when …","Create a new sh for a given redeem script Errors when …","Create a new wsh descriptor from witness script Errors …","Create a new sh wrapped wsh descriptor with witness script…","Create a new bare descriptor from witness script Errors …","Create a new sh sortedmulti descriptor with threshold <code>k</code> …","Create a new sh wrapped wsh sortedmulti descriptor from …","Create a new wsh sorted multi descriptor Errors when …","Get the [DescriptorType] of [Descriptor]","Whether or not the descriptor has any wildcards","Derives all wildcard keys in the descriptor using the …","Parse a descriptor that may contain secret keys","Serialize a descriptor to string with its secret keys","The fingerprint of the master key associated with this key","Full path, from the master key","Whether or not the key has a wildcards","If this public key has a wildcard, replace it by the …","Computes the public key corresponding to this descriptor …","Whether all spend paths of miniscript require a signature","Whether the miniscript is malleable","Whether the miniscript can exceed the resource …","Whether the miniscript contains a combination of timelocks","Whether the miniscript has repeated Pk or Pkh","Check whether the underlying Miniscript is safe under the …","Creates a new [Iter] iterator that will iterate over all […","Creates a new [PkIter] iterator that will iterate over …","Creates a new [PkhIter] iterator that will iterate over …","Creates a new [PkPkhIter] iterator that will iterate over …","Enumerates all child nodes of the current AST node (<code>self</code>) …","Returns child node with given index, if any","Returns <code>Vec</code> with cloned version of all public keys from …","Returns <code>Vec</code> with hashes of all public keys from the …","Returns <code>Vec</code> of [PkPkh] entries, representing either …","Returns <code>Option::Some</code> with cloned n’th public key from …","Returns <code>Option::Some</code> with hash of n’th public key from …","Returns <code>Option::Some</code> with hash of n’th public key or …","Add type information(Type and Extdata) to Miniscript …","Extracts the <code>AstElem</code> representing the root of the …","Get a reference to the inner <code>AstElem</code> representing the …","Attempt to parse an insane(scripts don’t clear sanity …","Attempt to parse a Script into Miniscript representation. …","Encode as a Bitcoin script","Size, in bytes of the script-pubkey. If this Miniscript …","Maximum number of witness elements used to satisfy the …","Maximum size, in bytes, of a satisfying witness. For …","Attempt to parse an insane(scripts don’t clear sanity …","Attempt to produce non-malleable satisfying witness for …","Attempt to produce a malleable satisfying witness for the …","Lifting corresponds conversion of miniscript into Policy […","Check whether the given satisfaction is valid under the …","Depending on script Context, some of the Terminals might …","Depending on script Context, some of the script resource …","Consensus rules at the Miniscript satisfaction time. It …","Policy rules at the Miniscript satisfaction time. It is …","Check the consensus + policy(if not disabled) rules that …","Check the consensus + policy(if not disabled) rules …","Check whether the top-level is type B","Other top level checks that are context specific","Check top level consensus rules.","Construct a new derived key","Construct a word list from its language code. Returns None…","Get the word list for this language","Get a [<code>WordMap</code>][WordMap] that allows word -> index …","Generates a new <code>Mnemonic</code>","Create a <code>Mnemonic</code> from pre-generated entropy","Create a <code>Mnemonic</code> from an existing mnemonic phrase","Validate a mnemonic phrase","Get the mnemonic phrase as a string reference.","Consume the <code>Mnemonic</code> and return the phrase as a <code>String</code>.","Get the original entropy value of the mnemonic phrase as …","Get the <code>Language</code>","Get a <code>MnemonicType</code> for a mnemonic phrase with a specific …","Get a <code>MnemonicType</code> for a mnemonic phrase representing the …","Get a <code>MnemonicType</code> for an existing mnemonic phrase","Return the number of entropy+checksum bits","Return the number of entropy bits","Return the number of checksum bits","Return the number of words","Generates the seed from the <code>Mnemonic</code> and the password.","Get the seed value as a byte slice","Return the public version of this key, by applying either …","Create a new instance of <code>SortedMultiVec</code> given a list of …","Parse an expression tree into a SortedMultiVec","This will panic if translatefpk returns an uncompressed …","utility function to sanity a sorted multi vec","Create Terminal::Multi containing sorted pubkeys","Encode as a Bitcoin script","Attempt to produce a satisfying witness for the witness …","Size, in bytes of the script-pubkey. If this Miniscript …","Maximum number of witness elements used to satisfy the …","Maximum size, in bytes, of a satisfying witness. In …","Return [<code>KeychainKind</code>] as a byte","Create a new instance of [<code>FeeRate</code>] given a float fee rate …","Create a new instance of [<code>FeeRate</code>] given a float fee rate …","Create a new [<code>FeeRate</code>] with the default min relay fee …","Return the value as satoshi/vbyte","Get the location of the UTXO","Get the <code>TxOut</code> of the UTXO"],"i":[0,0,0,1,1,1,0,2,2,2,0,0,0,3,3,3,3,0,0,4,0,5,5,0,6,6,6,6,6,6,6,0,0,0,0,7,0,8,8,8,0,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,0,12,12,12,12,12,12,12,0,13,13,0,0,14,0,0,0,0,0,0,0,0,15,15,0,16,16,0,17,17,0,18,18,0,0,19,0,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,0,23,23,0,0,0,0,0,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,25,25,25,26,25,27,25,28,25,29,25,30,25,31,25,32,32,25,33,33,25,25,0,0,0,34,35,35,35,35,35,34,36,36,36,36,36,34,37,34,34,0,38,38,38,38,0,39,39,39,0,40,40,40,40,40,40,38,38,38,0,0,0,41,0,42,0,43,0,44,0,45,45,0,46,46,46,0,47,47,0,48,48,48,0,49,49,0,50,50,50,0,0,51,51,51,51,51,0,0,52,52,52,0,53,53,53,53,53,53,53,53,53,53,53,53,0,0,0,0,0,0,54,0,55,0,0,0,56,56,56,56,56,56,56,56,0,0,57,57,57,57,57,0,0,0,58,58,0,59,59,0,60,60,0,61,61,0,0,62,62,0,53,53,53,53,53,53,53,53,53,53,53,53,0,0,0,0,0,0,63,63,63,0,64,64,64,64,0,65,65,65,0,66,0,67,67,67,67,67,0,68,68,0,69,0,70,70,70,70,70,0,71,71,0,72,0,73,73,73,73,73,73,0,0,0,74,74,74,74,74,0,75,0,0,0,76,76,76,76,0,77,0,0,78,0,0,79,79,79,79,79,0,0,80,80,80,0,81,81,81,81,81,81,81,81,81,0,82,82,82,82,0,83,0,84,84,84,84,84,84,84,0,0,0,0,0,0,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,0,86,86,86,86,0,87,87,87,0,88,0,89,0,90,90,90,90,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,0,91,91,91,91,91,91,91,91,91,92,92,91,91,91,91,91,91,91,93,91,94,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,0,95,95,0,0,96,96,96,0,97,97,0,98,98,99,99,0,100,100,100,100,100,100,100,0,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,101,101,101,101,101,101,101,101,101,101,101,101,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,104,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,24,24,24,24,24,24,24,24,24,24,24,24,24,109,109,109,109,109,109,109,109,109,109,109,109,109,109,25,25,25,25,25,25,25,25,25,25,25,25,25,25,34,34,34,34,34,34,34,34,34,34,34,34,34,34,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,56,56,56,56,56,56,56,56,56,56,56,56,56,56,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,59,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,67,67,67,67,67,67,67,67,67,67,67,67,69,69,69,69,69,69,69,69,69,69,69,69,72,72,72,72,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,73,73,73,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,112,112,112,112,112,112,112,112,112,112,112,112,112,112,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,76,76,76,76,76,76,76,76,76,76,76,76,113,113,113,113,113,113,113,113,113,113,113,113,113,113,78,78,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,114,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,62,52,51,52,51,52,51,52,106,61,58,107,106,107,62,62,58,58,51,51,61,61,52,106,106,106,106,106,106,107,107,107,107,107,107,107,51,59,58,52,62,61,62,51,106,58,107,52,58,52,51,59,51,52,59,62,61,107,60,106,58,51,52,62,51,51,51,51,51,51,51,51,107,106,58,61,51,62,52,58,58,51,58,61,107,52,62,106,111,110,56,110,111,57,56,110,111,110,57,111,56,110,111,111,110,57,56,56,110,57,111,110,1,101,4,7,104,105,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,19,19,19,19,19,19,19,19,19,19,19,15,15,15,15,15,15,15,15,15,15,15,15,19,19,19,19,19,19,19,19,19,19,19,19,15,15,19,19,15,19,42,43,44,45,46,47,48,49,50,116,117,52,51,69,63,58,59,111,111,118,118,110,110,67,69,69,110,113,78,1,1,1,1,1,1,1,101,101,101,101,101,101,4,4,4,4,4,4,7,7,7,7,7,7,95,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,1,1,1,2,2,2,101,6,6,6,6,10,10,10,10,10,15,15,16,16,18,18,24,24,24,24,24,24,24,34,38,67,67,73,73,80,80,84,11,104,105,108,109,25,34,38,39,64,72,95,112,96,97,98,100,74,113,80,81,83,84,114,115,85,86,87,102,19,109,39,72,112,100,113,78,83,84,114,115,86,87,108,39,80,83,86,87,11,108,39,39,40,40,64,95,112,112,96,96,97,97,98,98,100,100,74,74,80,80,81,83,83,86,87,108,39,112,80,83,86,87,79,108,69,91,2,3,4,5,6,102,103,7,8,9,10,11,15,17,18,19,108,24,109,25,34,38,39,40,63,64,72,73,95,112,96,97,98,100,74,76,113,78,79,80,81,83,84,114,115,85,86,87,89,90,91,6,10,108,24,40,73,74,81,79,11,108,39,95,80,86,87,2,3,5,8,9,17,18,109,25,34,38,39,95,96,100,79,2,3,5,8,9,17,18,95,96,100,79,108,108,108,108,108,102,102,102,102,102,103,103,103,103,103,103,103,103,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,58,58,58,58,58,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,108,56,56,56,110,110,110,110,110,110,110,110,57,57,57,57,57,57,57,111,111,59,62,62,62,62,62,62,62,62,62,62,95,112,112,112,112,98,98],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u8",15],["option",4],["str",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["option",4],["asref",8],["peer",3],["path",3],["vec",3]],[["compactfilterserror",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["hashset",3],["capability",4]]],[[["usize",15],["progress",8],["option",4]],[["error",4],["result",4]]],[[["usize",15],["progress",8],["option",4]],[["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["transaction",3]],[["error",4],["result",4]]],[[],[["u32",15],["result",4],["error",4]]],[[["usize",15]],[["result",4],["feerate",3],["error",4]]],null,null,[[],[["result",4],["error",4]]],null,null,[[["string",3],["f32",15],["option",4]],[["error",4],["result",4]]],[[]],null,[[],["noopprogress",3]],null,[[],["logprogress",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,[[["u32",15],["keychainkind",4],["script",3]],[["error",4],["result",4]]],[[["localutxo",3]],[["error",4],["result",4]]],[[["transaction",3]],[["error",4],["result",4]]],[[["transactiondetails",3]],[["error",4],["result",4]]],[[["u32",15],["keychainkind",4]],[["error",4],["result",4]]],[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]],[[["script",3]],[["result",4],["option",4],["error",4]]],[[["outpoint",3]],[["option",4],["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["txid",3],["bool",15]],[["result",4],["option",4],["error",4]]],[[["keychainkind",4]],[["result",4],["error",4],["option",4]]],null,[[["keychainkind",4],["asref",8]],[["error",4],["result",4]]],[[["keychainkind",4],["option",4]],[["error",4],["result",4],["vec",3]]],[[],[["result",4],["vec",3],["error",4]]],[[],[["result",4],["vec",3],["error",4]]],[[["bool",15]],[["error",4],["result",4],["vec",3]]],[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]],[[["script",3]],[["result",4],["option",4],["error",4]]],[[["outpoint",3]],[["option",4],["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["txid",3],["bool",15]],[["result",4],["option",4],["error",4]]],[[["keychainkind",4]],[["result",4],["error",4],["option",4]]],[[["keychainkind",4]],[["u32",15],["result",4],["error",4]]],null,null,[[]],[[],[["error",4],["result",4]]],null,null,[[],[["result",4],["error",4]]],null,null,[[["str",15]],[["string",3],["descriptorerror",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["string",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],null,null,null,null,null,null,null,null,[[],["bool",15]],null,null,null,null,null,null,null,[[],["bool",15]],[[["btreemap",3]],[["policyerror",4],["condition",3],["result",4]]],[[["secp256k1",3],["extendeddescriptor",6],["psbt",3]],[["result",4],["error",4]]],null,null,null,[[],[["descriptorerror",4],["result",4],["descriptortemplateout",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["terminal",4]],[["result",4],["scriptcontexterror",4]]],[[],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["option",4],["usize",15]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["error",4]]],[[["miniscript",3]],[["result",4],["error",4]]],[[["miniscript",3]],[["result",4],["error",4]]],null,null,null,null,null,null,[[["secp256k1",3],["network",4]],[["result",4],["descriptorerror",4]]],null,[[["signerscontainer",3],["secp256k1",3]],[["descriptorerror",4],["option",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["terminal",4]],[["result",4],["scriptcontexterror",4]]],[[],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["option",4],["usize",15]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["error",4]]],[[["miniscript",3]],[["result",4],["error",4]]],[[["miniscript",3]],[["result",4],["error",4]]],null,[[],["validnetworks",6]],[[],["validnetworks",6]],[[],["validnetworks",6]],[[["validnetworks",6]],["validnetworks",6]],null,[[["validnetworks",6],["descriptorpublickey",4]]],[[["validnetworks",6],["descriptorsecretkey",4]]],[[["validnetworks",6]]],null,null,null,[[],["bool",15]],[[],["bool",15]],null,[[],["scriptcontextenum",4]],[[],["bool",15]],[[],["bool",15]],null,[[],[["descriptorkey",4],["keyerror",4],["result",4]]],null,null,null,[[],["bool",15]],[[["network",4]],[["option",4],["extendedprivkey",3]]],[[["secp256k1",3],["network",4]],["extendedpubkey",3]],null,[[],[["extendedkey",4],["result",4],["keyerror",4]]],[[["option",4],["derivationpath",3],["keysource",6]],[["descriptorkey",4],["keyerror",4],["result",4]]],null,[[]],null,null,null,null,[[],[["generatedkey",3],["result",4]]],[[],[["generatedkey",3],["result",4]]],null,[[],[["generatedkey",3],["result",4]]],[[],[["generatedkey",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["hdkeypaths",6],["keychainkind",4],["script",3]],[["addressvalidatorerror",4],["result",4]]],null,null,null,null,null,[[],["u64",15]],[[],["u64",15]],null,[[["f32",15],["u64",15],["vec",3],["weightedutxo",3],["feerate",3]],[["result",4],["coinselectionresult",3],["error",4]]],null,null,[[["u64",15]]],null,null,null,null,[[["str",15],["bool",15],["wallet",3]],[["result",4],["str",15]]],[[],["string",3]],[[],[["option",4],["string",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["partiallysignedtransaction",3],["option",4],["secp256k1",3]],[["signererror",4],["result",4]]],[[],["bool",15]],[[["secp256k1",3]],["signerid",4]],[[],[["descriptorsecretkey",4],["option",4]]],null,null,null,[[["secp256k1",3]],["keymap",6]],[[]],[[["signerordering",3],["signer",8],["arc",3],["signerid",4]],[["arc",3],["option",4]]],[[["signerordering",3],["signerid",4]],[["arc",3],["option",4]]],[[],[["vec",3],["signerid",4]]],[[],[["arc",3],["vec",3]]],[[["signerid",4]],[["option",4],["arc",3]]],null,[[],["u64",15]],null,null,null,null,null,[[["feerate",3]]],[[["u64",15]]],[[["vec",3],["string",3],["keychainkind",4],["btreemap",3]]],[[],[["error",4],["result",4]]],[[["outpoint",3]],[["error",4],["result",4]]],[[["input",3],["usize",15],["outpoint",3]],[["error",4],["result",4]]],[[]],[[["vec",3],["outpoint",3]]],[[["outpoint",3]]],[[["sighashtype",4]]],[[["txordering",4]]],[[["u32",15]]],[[["i32",15]]],[[]],[[]],[[["changespendpolicy",4]]],[[]],[[]],[[]],[[]],[[["coinselectionalgorithm",8]],[["txbuilder",3],["coinselectionalgorithm",8]]],[[],[["result",4],["error",4]]],[[["vec",3]]],[[["script",3],["u64",15]]],[[["script",3]]],[[]],[[["u32",15]]],[[],[["error",4],["result",4]]],null,null,null,null,[[["transaction",3]]],null,null,null,null,null,[[],["bool",15]],null,[[["intowalletdescriptor",8],["network",4],["option",4]],[["result",4],["error",4]]],null,null,null,null,null,[[["addressindex",4]],[["result",4],["address",3],["error",4]]],[[["script",3]],[["bool",15],["result",4],["error",4]]],[[],[["result",4],["vec",3],["error",4]]],[[["outpoint",3]],[["option",4],["error",4],["result",4]]],[[["bool",15]],[["error",4],["result",4],["vec",3]]],[[],[["error",4],["result",4],["u64",15]]],[[["signerordering",3],["signer",8],["arc",3],["keychainkind",4]]],[[["arc",3],["addressvalidator",8]]],[[],[["createtx",3],["defaultcoinselectionalgorithm",6],["txbuilder",3]]],[[["txid",3]],[["result",4],["error",4],["txbuilder",3]]],[[["u32",15],["psbt",3],["option",4]],[["result",4],["error",4]]],[[["keychainkind",4]],[["result",4],["option",4],["error",4]]],[[["keychainkind",4]],[["result",4],["option",4],["error",4]]],[[["u32",15],["psbt",3],["option",4]],[["result",4],["error",4]]],[[],["secp256k1",3]],[[["keychainkind",4]],["extendeddescriptor",6]],[[["intowalletdescriptor",8],["network",4],["option",4]],[["result",4],["error",4]]],[[["u32",15],["progress",8],["option",4]],[["error",4],["result",4]]],[[]],[[],["network",4]],[[["transaction",3]],[["result",4],["txid",3],["error",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],null,null,[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["scriptcontextenum",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["scriptcontextenum",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["network",4],["secp256k1",3]],[["result",4],["error",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["network",4],["secp256k1",3]],[["result",4],["error",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["network",4],["secp256k1",3]],[["result",4],["error",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["network",4],["secp256k1",3]],[["result",4],["error",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["network",4],["secp256k1",3]],[["result",4],["error",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["network",4],["secp256k1",3]],[["result",4],["error",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["network",4],["secp256k1",3]],[["result",4],["error",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["network",4],["secp256k1",3]],[["result",4],["error",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["network",4],["secp256k1",3]],[["result",4],["error",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[],["result",4]],[[],["usize",15]],[[],[["vec",3],["result",4]]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["usize",15]],[[],[["vec",3],["result",4]]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["result",4]],[[],[["result",4],["descriptor",4]]],[[["tree",3]],[["miniscript",3],["result",4],["error",4]]],[[["tree",3]],[["result",4],["descriptor",4],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[["legacy",4]],["bool",15]],[[["segwitv0",4]],["bool",15]],[[["sortedmultivec",3]],["bool",15]],[[["sortedmultivec",3]],["bool",15]],[[["descriptorpublickey",4]],["bool",15]],[[["descriptorpublickey",4]],["bool",15]],[[["descriptor",4]],["bool",15]],[[["descriptor",4]],["bool",15]],[[["descriptorsinglepub",3]],["bool",15]],[[["descriptorsinglepub",3]],["bool",15]],[[["miniscript",3]],["bool",15]],[[["terminal",4]],[["result",4],["scriptcontexterror",4]]],[[],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["option",4],["usize",15]]],[[["terminal",4]],[["result",4],["scriptcontexterror",4]]],[[],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["option",4],["usize",15]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["descriptorsinglepub",3]],[[],["sortedmultivec",3]],[[],["descriptor",4]],[[],["legacy",4]],[[],["descriptorpublickey",4]],[[],["segwitv0",4]],[[],["miniscript",3]],[[["str",15]],[["descriptorpublickey",4],["result",4]]],[[["str",15]],[["miniscript",3],["result",4],["error",4]]],[[["str",15]],[["result",4],["descriptor",4],["error",4]]],[[["str",15]],[["result",4],["descriptorsecretkey",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],[["error",4],["result",4],["policy",4]]],[[],[["error",4],["result",4],["policy",4]]],[[],[["error",4],["result",4],["policy",4]]],[[],[["result",4],["error",4]]],[[["network",4]],[["result",4],["address",3],["error",4]]],[[],["script",3]],[[],["script",3]],[[],["script",3]],[[],[["result",4],["error",4]]],[[],[["usize",15],["result",4],["error",4]]],[[],["script",3]],[[["segwitv0",4]],["ordering",4]],[[["legacy",4]],["ordering",4]],[[["descriptorpublickey",4]],["ordering",4]],[[["descriptorsinglepub",3]],["ordering",4]],[[["descriptor",4]],["ordering",4]],[[["sortedmultivec",3]],["ordering",4]],[[["miniscript",3]],["ordering",4]],[[],["bool",15]],[[],["descriptorpublickey",4]],[[["descriptor",4]],[["ordering",4],["option",4]]],[[["descriptorpublickey",4]],[["ordering",4],["option",4]]],[[["descriptorsinglepub",3]],[["ordering",4],["option",4]]],[[["segwitv0",4]],[["ordering",4],["option",4]]],[[["miniscript",3]],[["ordering",4],["option",4]]],[[["sortedmultivec",3]],[["ordering",4],["option",4]]],[[["legacy",4]],[["ordering",4],["option",4]]],[[]],[[]],[[],["language",4]],[[],["mnemonic",3]],[[],["seed",3]],[[],["mnemonictype",4]],[[]],[[]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["str",15]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["mnemonictype",4]],[[],["language",4]],[[["language",4]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[["string",3],["f32",15],["option",4]],[["error",4],["result",4]]],[[["string",3],["f32",15],["option",4]],[["error",4],["result",4]]],[[["u32",15],["keychainkind",4],["script",3]],[["error",4],["result",4]]],[[["localutxo",3]],[["error",4],["result",4]]],[[["transaction",3]],[["error",4],["result",4]]],[[["transactiondetails",3]],[["error",4],["result",4]]],[[["u32",15],["keychainkind",4]],[["error",4],["result",4]]],[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]],[[["script",3]],[["result",4],["option",4],["error",4]]],[[["outpoint",3]],[["option",4],["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["txid",3],["bool",15]],[["result",4],["option",4],["error",4]]],[[["keychainkind",4]],[["result",4],["error",4],["option",4]]],[[["u32",15],["keychainkind",4],["script",3]],[["error",4],["result",4]]],[[["localutxo",3]],[["error",4],["result",4]]],[[["transaction",3]],[["error",4],["result",4]]],[[["transactiondetails",3]],[["error",4],["result",4]]],[[["u32",15],["keychainkind",4]],[["error",4],["result",4]]],[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]],[[["script",3]],[["result",4],["option",4],["error",4]]],[[["outpoint",3]],[["option",4],["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["txid",3],["bool",15]],[["result",4],["option",4],["error",4]]],[[["keychainkind",4]],[["result",4],["error",4],["option",4]]],[[["u32",15],["keychainkind",4],["script",3]],[["error",4],["result",4]]],[[["localutxo",3]],[["error",4],["result",4]]],[[["transaction",3]],[["error",4],["result",4]]],[[["transactiondetails",3]],[["error",4],["result",4]]],[[["u32",15],["keychainkind",4]],[["error",4],["result",4]]],[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]],[[["script",3]],[["result",4],["option",4],["error",4]]],[[["outpoint",3]],[["option",4],["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["txid",3],["bool",15]],[["result",4],["option",4],["error",4]]],[[["keychainkind",4]],[["result",4],["error",4],["option",4]]],[[["keychainkind",4],["asref",8]],[["error",4],["result",4]]],[[["keychainkind",4],["option",4]],[["error",4],["result",4],["vec",3]]],[[],[["result",4],["vec",3],["error",4]]],[[],[["result",4],["vec",3],["error",4]]],[[["bool",15]],[["error",4],["result",4],["vec",3]]],[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]],[[["script",3]],[["result",4],["option",4],["error",4]]],[[["outpoint",3]],[["option",4],["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["txid",3],["bool",15]],[["result",4],["option",4],["error",4]]],[[["keychainkind",4]],[["result",4],["error",4],["option",4]]],[[["keychainkind",4]],[["u32",15],["result",4],["error",4]]],[[["keychainkind",4],["asref",8]],[["error",4],["result",4]]],[[["keychainkind",4],["option",4]],[["error",4],["result",4],["vec",3]]],[[],[["result",4],["vec",3],["error",4]]],[[],[["result",4],["vec",3],["error",4]]],[[["bool",15]],[["error",4],["result",4],["vec",3]]],[[["u32",15],["keychainkind",4]],[["result",4],["option",4],["error",4]]],[[["script",3]],[["result",4],["option",4],["error",4]]],[[["outpoint",3]],[["option",4],["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["txid",3],["bool",15]],[["result",4],["option",4],["error",4]]],[[["keychainkind",4]],[["result",4],["error",4],["option",4]]],[[["keychainkind",4]],[["u32",15],["result",4],["error",4]]],[[]],[[],[["error",4],["result",4]]],[[]],[[],[["error",4],["result",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["descriptorerror",4],["result",4],["descriptortemplateout",6]]],[[],[["descriptorerror",4],["result",4],["descriptortemplateout",6]]],[[],[["descriptorerror",4],["result",4],["descriptortemplateout",6]]],[[],[["descriptorerror",4],["result",4],["descriptortemplateout",6]]],[[],[["descriptorerror",4],["result",4],["descriptortemplateout",6]]],[[],[["descriptorerror",4],["result",4],["descriptortemplateout",6]]],[[],[["descriptorerror",4],["result",4],["descriptortemplateout",6]]],[[],[["descriptorerror",4],["result",4],["descriptortemplateout",6]]],[[],[["descriptorerror",4],["result",4],["descriptortemplateout",6]]],[[["secp256k1",3],["network",4]],[["result",4],["descriptorerror",4]]],[[["secp256k1",3],["network",4]],[["result",4],["descriptorerror",4]]],[[["signerscontainer",3],["secp256k1",3]],[["result",4],["option",4],["error",4]]],[[["signerscontainer",3],["secp256k1",3]],[["result",4],["option",4],["error",4]]],[[],[["descriptorkey",4],["keyerror",4],["result",4]]],[[],[["descriptorkey",4],["keyerror",4],["result",4]]],[[],[["descriptorkey",4],["keyerror",4],["result",4]]],[[],[["descriptorkey",4],["keyerror",4],["result",4]]],[[],[["extendedkey",4],["result",4],["keyerror",4]]],[[["option",4],["derivationpath",3],["keysource",6]],[["descriptorkey",4],["keyerror",4],["result",4]]],[[],[["extendedkey",4],["result",4],["keyerror",4]]],[[["option",4],["derivationpath",3],["keysource",6]],[["descriptorkey",4],["keyerror",4],["result",4]]],[[],[["extendedkey",4],["result",4],["keyerror",4]]],[[["option",4],["derivationpath",3],["keysource",6]],[["descriptorkey",4],["keyerror",4],["result",4]]],[[],[["extendedkey",4],["result",4],["keyerror",4]]],[[],[["extendedkey",4],["result",4],["keyerror",4]]],[[["option",4],["derivationpath",3],["keysource",6]],[["descriptorkey",4],["keyerror",4],["result",4]]],[[],[["generatedkey",3],["result",4]]],[[["f32",15],["u64",15],["vec",3],["weightedutxo",3],["feerate",3]],[["result",4],["coinselectionresult",3],["error",4]]],[[["f32",15],["u64",15],["vec",3],["weightedutxo",3],["feerate",3]],[["result",4],["coinselectionresult",3],["error",4]]],[[],[["hashset",3],["capability",4]]],[[["usize",15],["progress",8],["option",4]],[["error",4],["result",4]]],[[["usize",15],["progress",8],["option",4]],[["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["transaction",3]],[["error",4],["result",4]]],[[],[["u32",15],["result",4],["error",4]]],[[["usize",15]],[["result",4],["feerate",3],["error",4]]],[[],[["hashset",3],["capability",4]]],[[["usize",15],["progress",8],["option",4]],[["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["transaction",3]],[["error",4],["result",4]]],[[],[["u32",15],["result",4],["error",4]]],[[["usize",15]],[["result",4],["feerate",3],["error",4]]],[[],[["hashset",3],["capability",4]]],[[["usize",15],["progress",8],["option",4]],[["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["transaction",3]],[["error",4],["result",4]]],[[],[["u32",15],["result",4],["error",4]]],[[["usize",15]],[["result",4],["feerate",3],["error",4]]],[[],[["hashset",3],["capability",4]]],[[["usize",15],["progress",8],["option",4]],[["error",4],["result",4]]],[[["txid",3]],[["result",4],["option",4],["error",4]]],[[["transaction",3]],[["error",4],["result",4]]],[[],[["u32",15],["result",4],["error",4]]],[[["usize",15]],[["result",4],["feerate",3],["error",4]]],[[]],[[["error",4]]],[[["addressvalidatorerror",4]]],[[["policyerror",4]]],[[["signererror",4]]],[[["keyerror",4]],["error",4]],[[["error",4]]],[[["error",4]]],[[["error",4]]],[[["error",4]]],[[["error",3]]],[[["error",4]]],[[["error",4]]],[[["error",4]]],[[["esploraerror",4]]],[[["error",4]]],[[["compactfilterserror",4]]],[[["electrumblockchain",3]]],[[["esplorablockchain",3]]],[[["compactfiltersblockchain",3]]],[[["electrumblockchainconfig",3]]],[[["esplorablockchainconfig",3]]],[[["compactfiltersblockchainconfig",3]]],[[["client",3]]],[[["error",3]]],[[["parseinterror",3]]],[[["error",4]]],[[["error",4]]],[[["error",3]]],[[["error",3]]],[[["error",4]]],[[["systemtimeerror",3]]],[[["error",4]]],[[["memorydatabase",3]]],[[["tree",3]]],[[]],[[]],[[]],[[["sleddbconfiguration",3]]],[[["keyerror",4]],["error",4]],[[["error",4]]],[[["error",4]]],[[["error",4]]],[[["error",4]]],[[["error",4]]],[[["policyerror",4]]],[[["bool",15]]],[[["satisfiableitem",4]]],[[["extendedpubkey",3]]],[[["extendedprivkey",3]]],[[["error",4]]],[[["error",4]]],[[["hash",3]],["signerid",4]],[[["fingerprint",3]],["signerid",4]],[[["keymap",6]],["signerscontainer",3]],[[],["capability",4]],[[],["noopprogress",3]],[[],["logprogress",3]],[[],["deriveddescriptorkey",3]],[[],["pkorf",3]],[[],["satisfiableitem",4]],[[],["satisfaction",4]],[[],["policy",3]],[[],["condition",3]],[[],["scriptcontextenum",4]],[[],["privatekeygenerateoptions",3]],[[],["keychainkind",4]],[[],["feerate",3]],[[],["localutxo",3]],[[],["weightedutxo",3]],[[],["utxo",4]],[[],["transactiondetails",3]],[[],["addressvalidatorerror",4]],[[],["largestfirstcoinselection",3]],[[],["signerid",4]],[[],["signererror",4]],[[],["signerordering",3]],[[],["signerscontainer",3]],[[],["createtx",3]],[[],["bumpfee",3]],[[]],[[],["txordering",4]],[[],["changespendpolicy",4]],[[],["mempool",3]],[[],["memorydatabase",3]],[[],["pkorf",3]],[[],["condition",3]],[[]],[[]],[[],["transactiondetails",3]],[[],["largestfirstcoinselection",3]],[[]],[[]],[[],["signerscontainer",3]],[[],["createtx",3]],[[],["bumpfee",3]],[[]],[[]],[[],["ordering",4]],[[["condition",3]],["ordering",4]],[[["signerid",4]],["ordering",4]],[[["signerordering",3]],["ordering",4]],[[["txordering",4]],["ordering",4]],[[["changespendpolicy",4]],["ordering",4]],[[["capability",4]],["bool",15]],[[],["bool",15]],[[["condition",3]],["bool",15]],[[["condition",3]],["bool",15]],[[["policyerror",4]],["bool",15]],[[["policyerror",4]],["bool",15]],[[["scriptcontextenum",4]],["bool",15]],[[["keychainkind",4]],["bool",15]],[[["feerate",3]],["bool",15]],[[["feerate",3]],["bool",15]],[[["localutxo",3]],["bool",15]],[[["localutxo",3]],["bool",15]],[[["weightedutxo",3]],["bool",15]],[[["weightedutxo",3]],["bool",15]],[[["utxo",4]],["bool",15]],[[["utxo",4]],["bool",15]],[[["transactiondetails",3]],["bool",15]],[[["transactiondetails",3]],["bool",15]],[[["addressvalidatorerror",4]],["bool",15]],[[["addressvalidatorerror",4]],["bool",15]],[[["signerid",4]],["bool",15]],[[["signerid",4]],["bool",15]],[[["signererror",4]],["bool",15]],[[["signerordering",3]],["bool",15]],[[["signerordering",3]],["bool",15]],[[["txordering",4]],["bool",15]],[[["changespendpolicy",4]],["bool",15]],[[],[["ordering",4],["option",4]]],[[["condition",3]],[["option",4],["ordering",4]]],[[["feerate",3]],[["option",4],["ordering",4]]],[[["signerid",4]],[["option",4],["ordering",4]]],[[["signerordering",3]],[["option",4],["ordering",4]]],[[["txordering",4]],[["option",4],["ordering",4]]],[[["changespendpolicy",4]],[["option",4],["ordering",4]]],[[],["string",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["str",15]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["publickey",3]],[[],["hash",3]],[[]],[[["transaction",3]]],[[["inventory",4]],[["option",4],["transaction",3]]],[[["txid",3]],["bool",15]],[[],[["vec",3],["transaction",3]]],[[["mempool",3],["tosocketaddrs",8],["network",4],["arc",3]],[["compactfilterserror",4],["result",4]]],[[["totargetaddr",8],["tosocketaddrs",8],["option",4],["mempool",3],["network",4],["arc",3]],[["compactfilterserror",4],["result",4]]],[[],["versionmessage",3]],[[],["network",4]],[[],[["mempool",3],["arc",3]]],[[],["bool",15]],[[["networkmessage",4]],[["result",4],["compactfilterserror",4]]],[[["option",4],["str",15],["duration",3]],[["option",4],["compactfilterserror",4],["result",4]]],[[],["descriptor",4]],[[],["descriptor",4]],[[],[["result",4],["descriptor",4],["error",4]]],[[],[["result",4],["descriptor",4],["error",4]]],[[["miniscript",3],["legacy",4]],[["result",4],["descriptor",4],["error",4]]],[[["segwitv0",4],["miniscript",3]],[["result",4],["descriptor",4],["error",4]]],[[["segwitv0",4],["miniscript",3]],[["result",4],["descriptor",4],["error",4]]],[[["miniscript",3],["barectx",4]],[["result",4],["descriptor",4],["error",4]]],[[["usize",15],["global",3],["vec",3]],[["result",4],["descriptor",4],["error",4]]],[[["usize",15],["global",3],["vec",3]],[["result",4],["descriptor",4],["error",4]]],[[["usize",15],["global",3],["vec",3]],[["result",4],["descriptor",4],["error",4]]],[[],["descriptortype",4]],[[],["bool",15]],[[["u32",15]],[["descriptorpublickey",4],["descriptor",4]]],[[["str",15],["secp256k1",3]],[["result",4],["error",4]]],[[["hashmap",3]],["string",3]],[[],["fingerprint",3]],[[],["derivationpath",3]],[[],["bool",15]],[[["u32",15]],["descriptorpublickey",4]],[[["secp256k1",3]],[["result",4],["publickey",3],["conversionerror",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4],["analysiserror",4]]],[[],["iter",3]],[[],["pkiter",3]],[[],["pkhiter",3]],[[],["pkpkhiter",3]],[[],[["vec",3],["miniscript",3],["global",3]]],[[["usize",15]],[["option",4],["miniscript",3]]],[[],[["global",3],["vec",3]]],[[],[["vec",3],["global",3]]],[[],[["vec",3],["pkpkh",4],["global",3]]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],[["option",4],["pkpkh",4]]],[[["terminal",4]],[["miniscript",3],["result",4],["error",4]]],[[],["terminal",4]],[[],["terminal",4]],[[["script",3]],[["miniscript",3],["result",4],["error",4]]],[[["script",3]],[["miniscript",3],["result",4],["error",4]]],[[],["script",3]],[[],["usize",15]],[[],[["usize",15],["result",4],["error",4]]],[[],[["usize",15],["result",4],["error",4]]],[[["str",15]],[["miniscript",3],["result",4],["error",4]]],[[],[["result",4],["vec",3],["error",4]]],[[],[["result",4],["vec",3],["error",4]]],[[],[["result",4],["lifterror",4]]],[[],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["scriptcontexterror",4]]],[[["miniscript",3]],[["result",4],["error",4]]],[[["miniscript",3]],[["result",4],["error",4]]],[[["miniscript",3]],[["result",4],["error",4]]],[[["secp256k1",3],["descriptorpublickey",4]],["deriveddescriptorkey",3]],[[["str",15]],[["language",4],["option",4]]],[[],["wordlist",3]],[[],["wordmap",3]],[[["mnemonictype",4],["language",4]],["mnemonic",3]],[[["language",4]],[["mnemonic",3],["error",3],["result",4]]],[[["language",4],["str",15]],[["mnemonic",3],["error",3],["result",4]]],[[["language",4],["str",15]],[["error",3],["result",4]]],[[],["str",15]],[[],["string",3]],[[]],[[],["language",4]],[[["usize",15]],[["mnemonictype",4],["error",3],["result",4]]],[[["usize",15]],[["mnemonictype",4],["error",3],["result",4]]],[[["str",15]],[["mnemonictype",4],["error",3],["result",4]]],[[],["usize",15]],[[],["usize",15]],[[],["u8",15]],[[],["usize",15]],[[["mnemonic",3],["str",15]],["seed",3]],[[]],[[["secp256k1",3]],[["descriptorpublickey",4],["descriptorkeyparseerror",3],["result",4]]],[[["usize",15],["global",3],["vec",3]],[["result",4],["sortedmultivec",3],["error",4]]],[[["tree",3]],[["result",4],["sortedmultivec",3],["error",4]]],[[],[["result",4],["sortedmultivec",3]]],[[],[["result",4],["error",4]]],[[],["terminal",4]],[[],["script",3]],[[],[["result",4],["vec",3],["error",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["u8",15]],[[["f32",15]]],[[["f32",15]]],[[]],[[],["f32",15]],[[],["outpoint",3]],[[],["txout",3]]],"p":[[4,"AnyBlockchain"],[4,"AnyBlockchainConfig"],[3,"ElectrumBlockchainConfig"],[3,"EsploraBlockchain"],[3,"EsploraBlockchainConfig"],[4,"EsploraError"],[3,"CompactFiltersBlockchain"],[3,"BitcoinPeerConfig"],[3,"CompactFiltersBlockchainConfig"],[4,"CompactFiltersError"],[4,"Capability"],[8,"Blockchain"],[8,"ConfigurableBlockchain"],[8,"Progress"],[4,"AnyDatabase"],[4,"AnyBatch"],[3,"SledDbConfiguration"],[4,"AnyDatabaseConfig"],[3,"MemoryDatabase"],[8,"BatchOperations"],[8,"Database"],[8,"BatchDatabase"],[8,"ConfigurableDatabase"],[4,"Error"],[4,"SatisfiableItem"],[13,"SHA256Preimage"],[13,"HASH256Preimage"],[13,"RIPEMD160Preimage"],[13,"HASH160Preimage"],[13,"AbsoluteTimelock"],[13,"RelativeTimelock"],[13,"Multisig"],[13,"Thresh"],[4,"Satisfaction"],[13,"Partial"],[13,"PartialComplete"],[13,"Complete"],[3,"Policy"],[3,"Condition"],[4,"PolicyError"],[8,"DescriptorTemplate"],[3,"P2PKH"],[3,"P2WPKH_P2SH"],[3,"P2WPKH"],[3,"BIP44"],[3,"BIP44Public"],[3,"BIP49"],[3,"BIP49Public"],[3,"BIP84"],[3,"BIP84Public"],[4,"Descriptor"],[3,"Miniscript"],[8,"ScriptContext"],[8,"IntoWalletDescriptor"],[8,"ExtractPolicy"],[4,"Language"],[4,"MnemonicType"],[4,"DescriptorPublicKey"],[4,"DescriptorSecretKey"],[3,"DescriptorSinglePriv"],[3,"DescriptorSinglePub"],[3,"SortedMultiVec"],[4,"DescriptorKey"],[4,"ScriptContextEnum"],[8,"ExtScriptContext"],[8,"IntoDescriptorKey"],[4,"ExtendedKey"],[8,"DerivableKey"],[3,"GeneratedKey"],[8,"GeneratableKey"],[8,"GeneratableDefaultOptions"],[3,"PrivateKeyGenerateOptions"],[4,"KeyError"],[4,"AddressValidatorError"],[8,"AddressValidator"],[3,"CoinSelectionResult"],[8,"CoinSelectionAlgorithm"],[3,"BranchAndBoundCoinSelection"],[3,"WalletExport"],[4,"SignerId"],[4,"SignerError"],[8,"Signer"],[3,"SignerOrdering"],[3,"SignersContainer"],[3,"TxBuilder"],[4,"TxOrdering"],[4,"ChangeSpendPolicy"],[8,"IsDust"],[3,"Wallet"],[4,"AddressIndex"],[4,"Error"],[13,"InsufficientFunds"],[13,"FeeRateTooLow"],[13,"FeeTooLow"],[4,"KeychainKind"],[3,"LocalUtxo"],[3,"WeightedUtxo"],[4,"Utxo"],[13,"Foreign"],[3,"TransactionDetails"],[3,"ElectrumBlockchain"],[3,"Mempool"],[3,"Peer"],[3,"NoopProgress"],[3,"LogProgress"],[4,"Legacy"],[4,"Segwitv0"],[3,"DerivedDescriptorKey"],[3,"PKOrF"],[3,"Mnemonic"],[3,"Seed"],[3,"FeeRate"],[3,"LargestFirstCoinSelection"],[3,"CreateTx"],[3,"BumpFee"],[6,"ExtendedDescriptor"],[6,"DescriptorTemplateOut"],[6,"MnemonicWithPassphrase"]]}\
}');
initSearch(searchIndex);