searchState.loadedDescShard("bdk_tmp_plan", 0, "A spending plan or <em>plan</em> for short is a representation of a …\nThe plan is complete\nLegacy ECDSA signatures are required\nA plan represents a particular spending path for a …\nA plan key contains the asset key originally provided …\nThe returned value from <code>Plan::try_complete</code>.\nThe signatures required to complete the plan\nSignatures and hash pre-images that must be provided to …\nSignatures and hash pre-images that can be used to …\nSegwitv0 ECDSA signatures are required\nA Taproot key spend signature is required\nTaproot script path signatures are required\nThe key the planner will sign with\nA hint from how to get from the asset key to the concrete …\nThe key that was in the descriptor that we are satisfying …\nECDSA signatures under their keys\nThe expected satisfaction weight for the plan if it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nrequired hash160 pre-images\nhash160 pre-images under their images\nrequired hash256 pre-images\nhash256 pre-images under their images\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum required transaction version required on the …\nThe minimum required locktime height or time on the …\nThe minimum required sequence (height or time) on the …\nWhether any hash pre-images are required in the plan\nrequired ripemd160 pre-images\nripemd160 pre-images under their images\nSchnorr signautres under their keys\nrequired sha256 pre-images\nSHA256 pre-images under their images\nrequired signatures\nWitness version for the plan\nThe script sig that should be set on the input\nThe witness that should be set on the input\nThe leaf hash of the script being used\nThe merkle root of the taproot output\nthe internal key\nThe keys in the script that require signatures")